{"version":3,"names":["_Systrace","require","_EventEmitter2","_interopRequireDefault","_callSuper","t","o","e","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","_superPropGet","r","p","_get2","RCTDeviceEventEmitter","_EventEmitter","_classCallCheck2","arguments","_inherits2","_createClass2","key","value","emit","eventType","beginEvent","concat","_len","length","args","Array","_key","endEvent","EventEmitter","instance","Object","defineProperty","global","configurable","_default","exports"],"sources":["RCTDeviceEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\nimport {beginEvent, endEvent} from '../Performance/Systrace';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\ntype RCTDeviceEventDefinitions = $FlowFixMe;\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nclass RCTDeviceEventEmitter extends EventEmitter<RCTDeviceEventDefinitions> {\n  // Add systrace to RCTDeviceEventEmitter.emit method for debugging\n  emit<TEvent: $Keys<RCTDeviceEventDefinitions>>(\n    eventType: TEvent,\n    ...args: RCTDeviceEventDefinitions[TEvent]\n  ): void {\n    beginEvent(() => `RCTDeviceEventEmitter.emit#${eventType}`);\n    super.emit(eventType, ...args);\n    endEvent();\n  }\n}\nconst instance = new RCTDeviceEventEmitter();\n\nObject.defineProperty(global, '__rctDeviceEventEmitter', {\n  configurable: true,\n  value: instance,\n});\n\nexport default (instance: IEventEmitter<RCTDeviceEventDefinitions>);\n"],"mappings":";;;;;;;;;;;;;AAYA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAC,sBAAA,CAAAF,OAAA;AAA0D,SAAAG,WAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,WAAAD,CAAA,OAAAE,gBAAA,aAAAF,CAAA,OAAAG,2BAAA,aAAAJ,CAAA,EAAAK,yBAAA,KAAAC,OAAA,CAAAC,SAAA,CAAAN,CAAA,EAAAC,CAAA,YAAAC,gBAAA,aAAAH,CAAA,EAAAQ,WAAA,IAAAP,CAAA,CAAAQ,KAAA,CAAAT,CAAA,EAAAE,CAAA;AAAA,SAAAG,0BAAA,cAAAL,CAAA,IAAAU,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAP,OAAA,CAAAC,SAAA,CAAAG,OAAA,iCAAAV,CAAA,aAAAK,yBAAA,YAAAA,0BAAA,aAAAL,CAAA;AAAA,SAAAc,cAAAd,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAa,CAAA,QAAAC,CAAA,OAAAC,KAAA,iBAAAd,gBAAA,iBAAAY,CAAA,GAAAf,CAAA,CAAAW,SAAA,GAAAX,CAAA,GAAAC,CAAA,EAAAC,CAAA,cAAAa,CAAA,yBAAAC,CAAA,aAAAhB,CAAA,WAAAgB,CAAA,CAAAP,KAAA,CAAAP,CAAA,EAAAF,CAAA,OAAAgB,CAAA;AAAA,IAWpDE,qBAAqB,aAAAC,aAAA;EAAA,SAAAD,sBAAA;IAAA,IAAAE,gBAAA,mBAAAF,qBAAA;IAAA,OAAAnB,UAAA,OAAAmB,qBAAA,EAAAG,SAAA;EAAA;EAAA,IAAAC,UAAA,aAAAJ,qBAAA,EAAAC,aAAA;EAAA,WAAAI,aAAA,aAAAL,qBAAA;IAAAM,GAAA;IAAAC,KAAA,EAEzB,SAAAC,IAAIA,CACFC,SAAiB,EAEX;MACN,IAAAC,oBAAU,EAAC;QAAA,qCAAAC,MAAA,CAAoCF,SAAS;MAAA,CAAE,CAAC;MAAC,SAAAG,IAAA,GAAAT,SAAA,CAAAU,MAAA,EAFzDC,IAAI,OAAAC,KAAA,CAAAH,IAAA,OAAAA,IAAA,WAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;QAAJF,IAAI,CAAAE,IAAA,QAAAb,SAAA,CAAAa,IAAA;MAAA;MAGPpB,aAAA,CAAAI,qBAAA,oBAAWS,SAAS,EAAAE,MAAA,CAAKG,IAAI;MAC7B,IAAAG,kBAAQ,EAAC,CAAC;IACZ;EAAC;AAAA,EATiCC,yBAAY;AAWhD,IAAMC,QAAQ,GAAG,IAAInB,qBAAqB,CAAC,CAAC;AAE5CoB,MAAM,CAACC,cAAc,CAACC,MAAM,EAAE,yBAAyB,EAAE;EACvDC,YAAY,EAAE,IAAI;EAClBhB,KAAK,EAAEY;AACT,CAAC,CAAC;AAAC,IAAAK,QAAA,GAAAC,OAAA,cAEaN,QAAQ","ignoreList":[]}