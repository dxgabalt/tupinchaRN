9c25e9319c63ca32ffc787f24d911639
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _Systrace = require("../Performance/Systrace");
var _EventEmitter2 = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2["default"])((0, _getPrototypeOf2["default"])(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var RCTDeviceEventEmitter = function (_EventEmitter) {
  function RCTDeviceEventEmitter() {
    (0, _classCallCheck2["default"])(this, RCTDeviceEventEmitter);
    return _callSuper(this, RCTDeviceEventEmitter, arguments);
  }
  (0, _inherits2["default"])(RCTDeviceEventEmitter, _EventEmitter);
  return (0, _createClass2["default"])(RCTDeviceEventEmitter, [{
    key: "emit",
    value: function emit(eventType) {
      (0, _Systrace.beginEvent)(function () {
        return "RCTDeviceEventEmitter.emit#".concat(eventType);
      });
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      _superPropGet(RCTDeviceEventEmitter, "emit", this, 3)([eventType].concat(args));
      (0, _Systrace.endEvent)();
    }
  }]);
}(_EventEmitter2["default"]);
var instance = new RCTDeviceEventEmitter();
Object.defineProperty(global, '__rctDeviceEventEmitter', {
  configurable: true,
  value: instance
});
var _default = exports["default"] = instance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfU3lzdHJhY2UiLCJyZXF1aXJlIiwiX0V2ZW50RW1pdHRlcjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NhbGxTdXBlciIsInQiLCJvIiwiZSIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJfc3VwZXJQcm9wR2V0IiwiciIsInAiLCJfZ2V0MiIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsIl9FdmVudEVtaXR0ZXIiLCJfY2xhc3NDYWxsQ2hlY2syIiwiYXJndW1lbnRzIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsImVtaXQiLCJldmVudFR5cGUiLCJiZWdpbkV2ZW50IiwiY29uY2F0IiwiX2xlbiIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJlbmRFdmVudCIsIkV2ZW50RW1pdHRlciIsImluc3RhbmNlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnbG9iYWwiLCJjb25maWd1cmFibGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJSQ1REZXZpY2VFdmVudEVtaXR0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtJRXZlbnRFbWl0dGVyfSBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInO1xuXG5pbXBvcnQge2JlZ2luRXZlbnQsIGVuZEV2ZW50fSBmcm9tICcuLi9QZXJmb3JtYW5jZS9TeXN0cmFjZSc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5cbi8vIEZJWE1FOiB1c2UgdHlwZWQgZXZlbnRzXG50eXBlIFJDVERldmljZUV2ZW50RGVmaW5pdGlvbnMgPSAkRmxvd0ZpeE1lO1xuXG4vKipcbiAqIEdsb2JhbCBFdmVudEVtaXR0ZXIgdXNlZCBieSB0aGUgbmF0aXZlIHBsYXRmb3JtIHRvIGVtaXQgZXZlbnRzIHRvIEphdmFTY3JpcHQuXG4gKiBFdmVudHMgYXJlIGlkZW50aWZpZWQgYnkgZ2xvYmFsbHkgdW5pcXVlIGV2ZW50IG5hbWVzLlxuICpcbiAqIE5hdGl2ZU1vZHVsZXMgdGhhdCBlbWl0IGV2ZW50cyBzaG91bGQgaW5zdGVhZCBzdWJjbGFzcyBgTmF0aXZlRXZlbnRFbWl0dGVyYC5cbiAqL1xuY2xhc3MgUkNURGV2aWNlRXZlbnRFbWl0dGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyPFJDVERldmljZUV2ZW50RGVmaW5pdGlvbnM+IHtcbiAgLy8gQWRkIHN5c3RyYWNlIHRvIFJDVERldmljZUV2ZW50RW1pdHRlci5lbWl0IG1ldGhvZCBmb3IgZGVidWdnaW5nXG4gIGVtaXQ8VEV2ZW50OiAkS2V5czxSQ1REZXZpY2VFdmVudERlZmluaXRpb25zPj4oXG4gICAgZXZlbnRUeXBlOiBURXZlbnQsXG4gICAgLi4uYXJnczogUkNURGV2aWNlRXZlbnREZWZpbml0aW9uc1tURXZlbnRdXG4gICk6IHZvaWQge1xuICAgIGJlZ2luRXZlbnQoKCkgPT4gYFJDVERldmljZUV2ZW50RW1pdHRlci5lbWl0IyR7ZXZlbnRUeXBlfWApO1xuICAgIHN1cGVyLmVtaXQoZXZlbnRUeXBlLCAuLi5hcmdzKTtcbiAgICBlbmRFdmVudCgpO1xuICB9XG59XG5jb25zdCBpbnN0YW5jZSA9IG5ldyBSQ1REZXZpY2VFdmVudEVtaXR0ZXIoKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbCwgJ19fcmN0RGV2aWNlRXZlbnRFbWl0dGVyJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIHZhbHVlOiBpbnN0YW5jZSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCAoaW5zdGFuY2U6IElFdmVudEVtaXR0ZXI8UkNURGV2aWNlRXZlbnREZWZpbml0aW9ucz4pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBWUEsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsY0FBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQTBELFNBQUFHLFdBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsT0FBQUUsZ0JBQUEsYUFBQUYsQ0FBQSxPQUFBRywyQkFBQSxhQUFBSixDQUFBLEVBQUFLLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTixDQUFBLEVBQUFDLENBQUEsWUFBQUMsZ0JBQUEsYUFBQUgsQ0FBQSxFQUFBUSxXQUFBLElBQUFQLENBQUEsQ0FBQVEsS0FBQSxDQUFBVCxDQUFBLEVBQUFFLENBQUE7QUFBQSxTQUFBRywwQkFBQSxjQUFBTCxDQUFBLElBQUFVLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVAsT0FBQSxDQUFBQyxTQUFBLENBQUFHLE9BQUEsaUNBQUFWLENBQUEsYUFBQUsseUJBQUEsWUFBQUEsMEJBQUEsYUFBQUwsQ0FBQTtBQUFBLFNBQUFjLGNBQUFkLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFhLENBQUEsUUFBQUMsQ0FBQSxPQUFBQyxLQUFBLGlCQUFBZCxnQkFBQSxpQkFBQVksQ0FBQSxHQUFBZixDQUFBLENBQUFXLFNBQUEsR0FBQVgsQ0FBQSxHQUFBQyxDQUFBLEVBQUFDLENBQUEsY0FBQWEsQ0FBQSx5QkFBQUMsQ0FBQSxhQUFBaEIsQ0FBQSxXQUFBZ0IsQ0FBQSxDQUFBUCxLQUFBLENBQUFQLENBQUEsRUFBQUYsQ0FBQSxPQUFBZ0IsQ0FBQTtBQUFBLElBV3BERSxxQkFBcUIsYUFBQUMsYUFBQTtFQUFBLFNBQUFELHNCQUFBO0lBQUEsSUFBQUUsZ0JBQUEsbUJBQUFGLHFCQUFBO0lBQUEsT0FBQW5CLFVBQUEsT0FBQW1CLHFCQUFBLEVBQUFHLFNBQUE7RUFBQTtFQUFBLElBQUFDLFVBQUEsYUFBQUoscUJBQUEsRUFBQUMsYUFBQTtFQUFBLFdBQUFJLGFBQUEsYUFBQUwscUJBQUE7SUFBQU0sR0FBQTtJQUFBQyxLQUFBLEVBRXpCLFNBQUFDLElBQUlBLENBQ0ZDLFNBQWlCLEVBRVg7TUFDTixJQUFBQyxvQkFBVSxFQUFDO1FBQUEscUNBQUFDLE1BQUEsQ0FBb0NGLFNBQVM7TUFBQSxDQUFFLENBQUM7TUFBQyxTQUFBRyxJQUFBLEdBQUFULFNBQUEsQ0FBQVUsTUFBQSxFQUZ6REMsSUFBSSxPQUFBQyxLQUFBLENBQUFILElBQUEsT0FBQUEsSUFBQSxXQUFBSSxJQUFBLE1BQUFBLElBQUEsR0FBQUosSUFBQSxFQUFBSSxJQUFBO1FBQUpGLElBQUksQ0FBQUUsSUFBQSxRQUFBYixTQUFBLENBQUFhLElBQUE7TUFBQTtNQUdQcEIsYUFBQSxDQUFBSSxxQkFBQSxvQkFBV1MsU0FBUyxFQUFBRSxNQUFBLENBQUtHLElBQUk7TUFDN0IsSUFBQUcsa0JBQVEsRUFBQyxDQUFDO0lBQ1o7RUFBQztBQUFBLEVBVGlDQyx5QkFBWTtBQVdoRCxJQUFNQyxRQUFRLEdBQUcsSUFBSW5CLHFCQUFxQixDQUFDLENBQUM7QUFFNUNvQixNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsTUFBTSxFQUFFLHlCQUF5QixFQUFFO0VBQ3ZEQyxZQUFZLEVBQUUsSUFBSTtFQUNsQmhCLEtBQUssRUFBRVk7QUFDVCxDQUFDLENBQUM7QUFBQyxJQUFBSyxRQUFBLEdBQUFDLE9BQUEsY0FFYU4sUUFBUSIsImlnbm9yZUxpc3QiOltdfQ==