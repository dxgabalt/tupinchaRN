bde5b8afcc57f9b37bbd988c2e7e937d
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativePlatformConstantsIOS = _interopRequireDefault(require("./NativePlatformConstantsIOS"));
var Platform = {
  __constants: null,
  OS: 'ios',
  get Version() {
    return this.constants.osVersion;
  },
  get constants() {
    if (this.__constants == null) {
      this.__constants = _NativePlatformConstantsIOS["default"].getConstants();
    }
    return this.__constants;
  },
  get isPad() {
    return this.constants.interfaceIdiom === 'pad';
  },
  get isTV() {
    return this.constants.interfaceIdiom === 'tv';
  },
  get isVision() {
    return this.constants.interfaceIdiom === 'vision';
  },
  get isTesting() {
    if (__DEV__) {
      return this.constants.isTesting;
    }
    return false;
  },
  get isDisableAnimations() {
    var _this$constants$isDis;
    return (_this$constants$isDis = this.constants.isDisableAnimations) !== null && _this$constants$isDis !== void 0 ? _this$constants$isDis : this.isTesting;
  },
  get isMacCatalyst() {
    var _this$constants$isMac;
    return (_this$constants$isMac = this.constants.isMacCatalyst) !== null && _this$constants$isMac !== void 0 ? _this$constants$isMac : false;
  },
  select: function select(spec) {
    return ('ios' in spec ? spec.ios : 'native' in spec ? spec["native"] : spec["default"]
    );
  }
};
module.exports = Platform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUGxhdGZvcm1Db25zdGFudHNJT1MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlBsYXRmb3JtIiwiX19jb25zdGFudHMiLCJPUyIsIlZlcnNpb24iLCJjb25zdGFudHMiLCJvc1ZlcnNpb24iLCJOYXRpdmVQbGF0Zm9ybUNvbnN0YW50c0lPUyIsImdldENvbnN0YW50cyIsImlzUGFkIiwiaW50ZXJmYWNlSWRpb20iLCJpc1RWIiwiaXNWaXNpb24iLCJpc1Rlc3RpbmciLCJfX0RFVl9fIiwiaXNEaXNhYmxlQW5pbWF0aW9ucyIsIl90aGlzJGNvbnN0YW50cyRpc0RpcyIsImlzTWFjQ2F0YWx5c3QiLCJfdGhpcyRjb25zdGFudHMkaXNNYWMiLCJzZWxlY3QiLCJzcGVjIiwiaW9zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXRmb3JtLmlvcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuaW1wb3J0IHR5cGUge1xuICBQbGF0Zm9ybSBhcyBQbGF0Zm9ybVR5cGUsXG4gIFBsYXRmb3JtU2VsZWN0U3BlYyxcbn0gZnJvbSAnLi9QbGF0Zm9ybS5mbG93JztcblxuaW1wb3J0IE5hdGl2ZVBsYXRmb3JtQ29uc3RhbnRzSU9TIGZyb20gJy4vTmF0aXZlUGxhdGZvcm1Db25zdGFudHNJT1MnO1xuXG5jb25zdCBQbGF0Zm9ybTogUGxhdGZvcm1UeXBlID0ge1xuICBfX2NvbnN0YW50czogbnVsbCxcbiAgT1M6ICdpb3MnLFxuICAvLyAkRmxvd0ZpeE1lW3Vuc2FmZS1nZXR0ZXJzLXNldHRlcnNdXG4gIGdldCBWZXJzaW9uKCk6IHN0cmluZyB7XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLm9zVmVyc2lvbjtcbiAgfSxcbiAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXVxuICBnZXQgY29uc3RhbnRzKCk6IHt8XG4gICAgZm9yY2VUb3VjaEF2YWlsYWJsZTogYm9vbGVhbixcbiAgICBpbnRlcmZhY2VJZGlvbTogc3RyaW5nLFxuICAgIGlzVGVzdGluZzogYm9vbGVhbixcbiAgICBpc0Rpc2FibGVBbmltYXRpb25zPzogYm9vbGVhbixcbiAgICBvc1ZlcnNpb246IHN0cmluZyxcbiAgICByZWFjdE5hdGl2ZVZlcnNpb246IHt8XG4gICAgICBtYWpvcjogbnVtYmVyLFxuICAgICAgbWlub3I6IG51bWJlcixcbiAgICAgIHBhdGNoOiBudW1iZXIsXG4gICAgICBwcmVyZWxlYXNlOiA/c3RyaW5nLFxuICAgIHx9LFxuICAgIHN5c3RlbU5hbWU6IHN0cmluZyxcbiAgICBpc01hY0NhdGFseXN0PzogYm9vbGVhbixcbiAgfH0ge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIGlmICh0aGlzLl9fY29uc3RhbnRzID09IG51bGwpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgICAgdGhpcy5fX2NvbnN0YW50cyA9IE5hdGl2ZVBsYXRmb3JtQ29uc3RhbnRzSU9TLmdldENvbnN0YW50cygpO1xuICAgIH1cbiAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICByZXR1cm4gdGhpcy5fX2NvbnN0YW50cztcbiAgfSxcbiAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXVxuICBnZXQgaXNQYWQoKTogYm9vbGVhbiB7XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLmludGVyZmFjZUlkaW9tID09PSAncGFkJztcbiAgfSxcbiAgLy8gJEZsb3dGaXhNZVt1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzXVxuICBnZXQgaXNUVigpOiBib29sZWFuIHtcbiAgICAvLyAkRmxvd0ZpeE1lW29iamVjdC10aGlzLXJlZmVyZW5jZV1cbiAgICByZXR1cm4gdGhpcy5jb25zdGFudHMuaW50ZXJmYWNlSWRpb20gPT09ICd0dic7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IGlzVmlzaW9uKCk6IGJvb2xlYW4ge1xuICAgIC8vICRGbG93Rml4TWVbb2JqZWN0LXRoaXMtcmVmZXJlbmNlXVxuICAgIHJldHVybiB0aGlzLmNvbnN0YW50cy5pbnRlcmZhY2VJZGlvbSA9PT0gJ3Zpc2lvbic7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IGlzVGVzdGluZygpOiBib29sZWFuIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgICByZXR1cm4gdGhpcy5jb25zdGFudHMuaXNUZXN0aW5nO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IGlzRGlzYWJsZUFuaW1hdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLmlzRGlzYWJsZUFuaW1hdGlvbnMgPz8gdGhpcy5pc1Rlc3Rpbmc7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdW5zYWZlLWdldHRlcnMtc2V0dGVyc11cbiAgZ2V0IGlzTWFjQ2F0YWx5c3QoKTogYm9vbGVhbiB7XG4gICAgLy8gJEZsb3dGaXhNZVtvYmplY3QtdGhpcy1yZWZlcmVuY2VdXG4gICAgcmV0dXJuIHRoaXMuY29uc3RhbnRzLmlzTWFjQ2F0YWx5c3QgPz8gZmFsc2U7XG4gIH0sXG4gIHNlbGVjdDogPFQ+KHNwZWM6IFBsYXRmb3JtU2VsZWN0U3BlYzxUPik6IFQgPT5cbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgJ2lvcycgaW4gc3BlYyA/IHNwZWMuaW9zIDogJ25hdGl2ZScgaW4gc3BlYyA/IHNwZWMubmF0aXZlIDogc3BlYy5kZWZhdWx0LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQbGF0Zm9ybTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBZUEsSUFBQUEsMkJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQU1DLFFBQXNCLEdBQUc7RUFDN0JDLFdBQVcsRUFBRSxJQUFJO0VBQ2pCQyxFQUFFLEVBQUUsS0FBSztFQUVULElBQUlDLE9BQU9BLENBQUEsRUFBVztJQUVwQixPQUFPLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxTQUFTO0VBQ2pDLENBQUM7RUFFRCxJQUFJRCxTQUFTQSxDQUFBLEVBY1Y7SUFFRCxJQUFJLElBQUksQ0FBQ0gsV0FBVyxJQUFJLElBQUksRUFBRTtNQUU1QixJQUFJLENBQUNBLFdBQVcsR0FBR0ssc0NBQTBCLENBQUNDLFlBQVksQ0FBQyxDQUFDO0lBQzlEO0lBRUEsT0FBTyxJQUFJLENBQUNOLFdBQVc7RUFDekIsQ0FBQztFQUVELElBQUlPLEtBQUtBLENBQUEsRUFBWTtJQUVuQixPQUFPLElBQUksQ0FBQ0osU0FBUyxDQUFDSyxjQUFjLEtBQUssS0FBSztFQUNoRCxDQUFDO0VBRUQsSUFBSUMsSUFBSUEsQ0FBQSxFQUFZO0lBRWxCLE9BQU8sSUFBSSxDQUFDTixTQUFTLENBQUNLLGNBQWMsS0FBSyxJQUFJO0VBQy9DLENBQUM7RUFFRCxJQUFJRSxRQUFRQSxDQUFBLEVBQVk7SUFFdEIsT0FBTyxJQUFJLENBQUNQLFNBQVMsQ0FBQ0ssY0FBYyxLQUFLLFFBQVE7RUFDbkQsQ0FBQztFQUVELElBQUlHLFNBQVNBLENBQUEsRUFBWTtJQUN2QixJQUFJQyxPQUFPLEVBQUU7TUFFWCxPQUFPLElBQUksQ0FBQ1QsU0FBUyxDQUFDUSxTQUFTO0lBQ2pDO0lBQ0EsT0FBTyxLQUFLO0VBQ2QsQ0FBQztFQUVELElBQUlFLG1CQUFtQkEsQ0FBQSxFQUFZO0lBQUEsSUFBQUMscUJBQUE7SUFFakMsUUFBQUEscUJBQUEsR0FBTyxJQUFJLENBQUNYLFNBQVMsQ0FBQ1UsbUJBQW1CLGNBQUFDLHFCQUFBLGNBQUFBLHFCQUFBLEdBQUksSUFBSSxDQUFDSCxTQUFTO0VBQzdELENBQUM7RUFFRCxJQUFJSSxhQUFhQSxDQUFBLEVBQVk7SUFBQSxJQUFBQyxxQkFBQTtJQUUzQixRQUFBQSxxQkFBQSxHQUFPLElBQUksQ0FBQ2IsU0FBUyxDQUFDWSxhQUFhLGNBQUFDLHFCQUFBLGNBQUFBLHFCQUFBLEdBQUksS0FBSztFQUM5QyxDQUFDO0VBQ0RDLE1BQU0sRUFBRSxTQUFSQSxNQUFNQSxDQUFNQyxJQUEyQjtJQUFBLFFBRXJDLEtBQUssSUFBSUEsSUFBSSxHQUFHQSxJQUFJLENBQUNDLEdBQUcsR0FBRyxRQUFRLElBQUlELElBQUksR0FBR0EsSUFBSSxVQUFPLEdBQUdBLElBQUk7SUFBUTtFQUFBO0FBQzVFLENBQUM7QUFFREUsTUFBTSxDQUFDQyxPQUFPLEdBQUd0QixRQUFRIiwiaWdub3JlTGlzdCI6W119