939592693e437560259e87f0a1e71cf5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processFilter;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _processColor = _interopRequireDefault(require("./processColor"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function processFilter(filter) {
  var result = [];
  if (filter == null) {
    return result;
  }
  if (typeof filter === 'string') {
    filter = filter.replace(/\n/g, ' ');
    var regex = /([\w-]+)\(([^()]*|\([^()]*\)|[^()]*\([^()]*\)[^()]*)\)/g;
    var matches;
    while (matches = regex.exec(filter)) {
      var filterName = matches[1].toLowerCase();
      if (filterName === 'drop-shadow') {
        var dropShadow = parseDropShadow(matches[2]);
        if (dropShadow != null) {
          result.push({
            dropShadow: dropShadow
          });
        } else {
          return [];
        }
      } else {
        var camelizedName = filterName === 'drop-shadow' ? 'dropShadow' : filterName === 'hue-rotate' ? 'hueRotate' : filterName;
        var amount = _getFilterAmount(camelizedName, matches[2]);
        if (amount != null) {
          var filterFunction = {};
          filterFunction[camelizedName] = amount;
          result.push(filterFunction);
        } else {
          return [];
        }
      }
    }
  } else if (Array.isArray(filter)) {
    var _iterator = _createForOfIteratorHelper(filter),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _filterFunction = _step.value;
        var _Object$entries$ = (0, _slicedToArray2["default"])(Object.entries(_filterFunction)[0], 2),
          _filterName = _Object$entries$[0],
          filterValue = _Object$entries$[1];
        if (_filterName === 'dropShadow') {
          var _dropShadow = parseDropShadow(filterValue);
          if (_dropShadow == null) {
            return [];
          }
          result.push({
            dropShadow: _dropShadow
          });
        } else {
          var _amount = _getFilterAmount(_filterName, filterValue);
          if (_amount != null) {
            var resultObject = {};
            resultObject[_filterName] = _amount;
            result.push(resultObject);
          } else {
            return [];
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } else {
    throw new TypeError("".concat((0, _typeof2["default"])(filter), " filter is not a string or array"));
  }
  return result;
}
function _getFilterAmount(filterName, filterArgs) {
  var filterArgAsNumber;
  var unit;
  if (typeof filterArgs === 'string') {
    var argsWithUnitsRegex = new RegExp(/([+-]?\d*(\.\d+)?)([a-zA-Z%]+)?/g);
    var match = argsWithUnitsRegex.exec(filterArgs);
    if (!match || isNaN(Number(match[1]))) {
      return undefined;
    }
    filterArgAsNumber = Number(match[1]);
    unit = match[3];
  } else if (typeof filterArgs === 'number') {
    filterArgAsNumber = filterArgs;
  } else {
    return undefined;
  }
  switch (filterName) {
    case 'hueRotate':
      if (filterArgAsNumber === 0) {
        return 0;
      }
      if (unit !== 'deg' && unit !== 'rad') {
        return undefined;
      }
      return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;
    case 'blur':
      if (unit && unit !== 'px' || filterArgAsNumber < 0) {
        return undefined;
      }
      return filterArgAsNumber;
    case 'brightness':
    case 'contrast':
    case 'grayscale':
    case 'invert':
    case 'opacity':
    case 'saturate':
    case 'sepia':
      if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {
        return undefined;
      }
      if (unit === '%') {
        filterArgAsNumber /= 100;
      }
      return filterArgAsNumber;
    default:
      return undefined;
  }
}
function parseDropShadow(rawDropShadow) {
  var dropShadow = typeof rawDropShadow === 'string' ? parseDropShadowString(rawDropShadow) : rawDropShadow;
  var parsedDropShadow = {
    offsetX: 0,
    offsetY: 0
  };
  var offsetX;
  var offsetY;
  for (var arg in dropShadow) {
    var value = void 0;
    switch (arg) {
      case 'offsetX':
        value = typeof dropShadow.offsetX === 'string' ? parseLength(dropShadow.offsetX) : dropShadow.offsetX;
        if (value == null) {
          return null;
        }
        offsetX = value;
        break;
      case 'offsetY':
        value = typeof dropShadow.offsetY === 'string' ? parseLength(dropShadow.offsetY) : dropShadow.offsetY;
        if (value == null) {
          return null;
        }
        offsetY = value;
        break;
      case 'standardDeviation':
        value = typeof dropShadow.standardDeviation === 'string' ? parseLength(dropShadow.standardDeviation) : dropShadow.standardDeviation;
        if (value == null || value < 0) {
          return null;
        }
        parsedDropShadow.standardDeviation = value;
        break;
      case 'color':
        var color = (0, _processColor["default"])(dropShadow.color);
        if (color == null) {
          return null;
        }
        parsedDropShadow.color = color;
        break;
      default:
        return null;
    }
  }
  if (offsetX == null || offsetY == null) {
    return null;
  }
  parsedDropShadow.offsetX = offsetX;
  parsedDropShadow.offsetY = offsetY;
  return parsedDropShadow;
}
function parseDropShadowString(rawDropShadow) {
  var dropShadow = {
    offsetX: 0,
    offsetY: 0
  };
  var offsetX;
  var offsetY;
  var lengthCount = 0;
  var keywordDetectedAfterLength = false;
  var _iterator2 = _createForOfIteratorHelper(rawDropShadow.split(/\s+(?![^(]*\))/)),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var arg = _step2.value;
      var processedColor = (0, _processColor["default"])(arg);
      if (processedColor != null) {
        if (dropShadow.color != null) {
          return null;
        }
        if (offsetX != null) {
          keywordDetectedAfterLength = true;
        }
        dropShadow.color = arg;
        continue;
      }
      switch (lengthCount) {
        case 0:
          offsetX = arg;
          lengthCount++;
          break;
        case 1:
          if (keywordDetectedAfterLength) {
            return null;
          }
          offsetY = arg;
          lengthCount++;
          break;
        case 2:
          if (keywordDetectedAfterLength) {
            return null;
          }
          dropShadow.standardDeviation = arg;
          lengthCount++;
          break;
        default:
          return null;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (offsetX == null || offsetY == null) {
    return null;
  }
  dropShadow.offsetX = offsetX;
  dropShadow.offsetY = offsetY;
  return dropShadow;
}
function parseLength(length) {
  var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
  var match = argsWithUnitsRegex.exec(length);
  if (!match || Number.isNaN(match[1])) {
    return null;
  }
  if (match[3] != null && match[3] !== 'px') {
    return null;
  }
  return Number(match[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,