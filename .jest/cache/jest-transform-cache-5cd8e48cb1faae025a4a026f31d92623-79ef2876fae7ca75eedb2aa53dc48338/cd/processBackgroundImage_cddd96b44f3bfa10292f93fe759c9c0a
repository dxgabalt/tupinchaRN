d3511c04c6e4ef57bce0f2573c118ab2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processBackgroundImage;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var processColor = require('./processColor')["default"];
var DIRECTION_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/;
var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
var TO_BOTTOM_START_END_POINTS = {
  start: {
    x: 0.5,
    y: 0
  },
  end: {
    x: 0.5,
    y: 1
  }
};
function processBackgroundImage(backgroundImage) {
  var result = [];
  if (backgroundImage == null) {
    return result;
  }
  if (typeof backgroundImage === 'string') {
    result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
  } else if (Array.isArray(backgroundImage)) {
    var _iterator = _createForOfIteratorHelper(backgroundImage),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var bgImage = _step.value;
        var processedColorStops = [];
        for (var index = 0; index < bgImage.colorStops.length; index++) {
          var colorStop = bgImage.colorStops[index];
          var processedColor = processColor(colorStop.color);
          if (processedColor == null) {
            return [];
          }
          if (colorStop.positions != null && colorStop.positions.length > 0) {
            var _iterator2 = _createForOfIteratorHelper(colorStop.positions),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var position = _step2.value;
                if (position.endsWith('%')) {
                  processedColorStops.push({
                    color: processedColor,
                    position: parseFloat(position) / 100
                  });
                } else {
                  return [];
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          } else {
            processedColorStops.push({
              color: processedColor,
              position: null
            });
          }
        }
        var points = null;
        if (typeof bgImage.direction === 'undefined') {
          points = TO_BOTTOM_START_END_POINTS;
        } else if (ANGLE_UNIT_REGEX.test(bgImage.direction)) {
          var angle = parseAngle(bgImage.direction);
          if (angle != null) {
            points = calculateStartEndPointsFromAngle(angle);
          }
        } else if (DIRECTION_REGEX.test(bgImage.direction)) {
          var processedPoints = calculateStartEndPointsFromDirection(bgImage.direction);
          if (processedPoints != null) {
            points = processedPoints;
          }
        }
        var fixedColorStops = getFixedColorStops(processedColorStops);
        if (points != null) {
          result = result.concat({
            type: 'linearGradient',
            start: points.start,
            end: points.end,
            colorStops: fixedColorStops
          });
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return result;
}
function parseCSSLinearGradient(cssString) {
  var gradients = [];
  var match;
  var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
  while (match = linearGradientRegex.exec(cssString)) {
    var gradientContent = match[1];
    var parts = gradientContent.split(',');
    var points = TO_BOTTOM_START_END_POINTS;
    var trimmedDirection = parts[0].trim().toLowerCase();
    var colorStopRegex = /\s*((?:(?:rgba?|hsla?)\s*\([^)]+\))|#[0-9a-fA-F]+|[a-zA-Z]+)(?:\s+(-?[0-9.]+%?)(?:\s+(-?[0-9.]+%?))?)?\s*/gi;
    if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
      var angle = parseAngle(trimmedDirection);
      if (angle != null) {
        points = calculateStartEndPointsFromAngle(angle);
        parts.shift();
      } else {
        return [];
      }
    } else if (DIRECTION_REGEX.test(trimmedDirection)) {
      var parsedPoints = calculateStartEndPointsFromDirection(trimmedDirection);
      if (parsedPoints != null) {
        points = parsedPoints;
        parts.shift();
      } else {
        return [];
      }
    } else if (!colorStopRegex.test(trimmedDirection)) {
      return [];
    }
    colorStopRegex.lastIndex = 0;
    var colorStops = [];
    var fullColorStopsStr = parts.join(',');
    var colorStopMatch = void 0;
    while (colorStopMatch = colorStopRegex.exec(fullColorStopsStr)) {
      var _colorStopMatch = colorStopMatch,
        _colorStopMatch2 = (0, _slicedToArray2["default"])(_colorStopMatch, 4),
        color = _colorStopMatch2[1],
        position1 = _colorStopMatch2[2],
        position2 = _colorStopMatch2[3];
      var processedColor = processColor(color.trim().toLowerCase());
      if (processedColor == null) {
        return [];
      }
      if (typeof position1 !== 'undefined') {
        if (position1.endsWith('%')) {
          colorStops.push({
            color: processedColor,
            position: parseFloat(position1) / 100
          });
        } else {
          return [];
        }
      } else {
        colorStops.push({
          color: processedColor,
          position: null
        });
      }
      if (typeof position2 !== 'undefined') {
        if (position2.endsWith('%')) {
          colorStops.push({
            color: processedColor,
            position: parseFloat(position2) / 100
          });
        } else {
          return [];
        }
      }
    }
    var fixedColorStops = getFixedColorStops(colorStops);
    gradients.push({
      type: 'linearGradient',
      start: points.start,
      end: points.end,
      colorStops: fixedColorStops
    });
  }
  return gradients;
}
function calculateStartEndPointsFromDirection(direction) {
  var normalizedDirection = direction.replace(/\s+/g, ' ');
  switch (normalizedDirection) {
    case 'to right':
      return {
        start: {
          x: 0,
          y: 0.5
        },
        end: {
          x: 1,
          y: 0.5
        }
      };
    case 'to left':
      return {
        start: {
          x: 1,
          y: 0.5
        },
        end: {
          x: 0,
          y: 0.5
        }
      };
    case 'to bottom':
      return TO_BOTTOM_START_END_POINTS;
    case 'to top':
      return {
        start: {
          x: 0.5,
          y: 1
        },
        end: {
          x: 0.5,
          y: 0
        }
      };
    case 'to bottom right':
    case 'to right bottom':
      return {
        start: {
          x: 0,
          y: 0
        },
        end: {
          x: 1,
          y: 1
        }
      };
    case 'to top left':
    case 'to left top':
      return {
        start: {
          x: 1,
          y: 1
        },
        end: {
          x: 0,
          y: 0
        }
      };
    case 'to bottom left':
    case 'to left bottom':
      return {
        start: {
          x: 1,
          y: 0
        },
        end: {
          x: 0,
          y: 1
        }
      };
    case 'to top right':
    case 'to right top':
      return {
        start: {
          x: 0,
          y: 1
        },
        end: {
          x: 1,
          y: 0
        }
      };
    default:
      return null;
  }
}
function calculateStartEndPointsFromAngle(angleRadians) {
  var angleRadiansNormalized = angleRadians % (2 * Math.PI);
  if (angleRadiansNormalized < 0) {
    angleRadiansNormalized += 2 * Math.PI;
  }
  var endX = 0.5 + 0.5 * Math.sin(angleRadiansNormalized);
  var endY = 0.5 - 0.5 * Math.cos(angleRadiansNormalized);
  var startX = 1 - endX;
  var startY = 1 - endY;
  return {
    start: {
      x: startX,
      y: startY
    },
    end: {
      x: endX,
      y: endY
    }
  };
}
function parseAngle(angle) {
  var match = angle.match(ANGLE_UNIT_REGEX);
  if (!match) {
    return null;
  }
  var _match = (0, _slicedToArray2["default"])(match, 3),
    value = _match[1],
    unit = _match[2];
  var numericValue = parseFloat(value);
  switch (unit) {
    case 'deg':
      return numericValue * Math.PI / 180;
    case 'grad':
      return numericValue * Math.PI / 200;
    case 'rad':
      return numericValue;
    case 'turn':
      return numericValue * 2 * Math.PI;
    default:
      return null;
  }
}
function getFixedColorStops(colorStops) {
  var _colorStops$0$positio;
  var fixedColorStops = [];
  var hasNullPositions = false;
  var maxPositionSoFar = (_colorStops$0$positio = colorStops[0].position) !== null && _colorStops$0$positio !== void 0 ? _colorStops$0$positio : 0;
  for (var i = 0; i < colorStops.length; i++) {
    var colorStop = colorStops[i];
    var newPosition = colorStop.position;
    if (newPosition === null) {
      if (i === 0) {
        newPosition = 0;
      } else if (i === colorStops.length - 1) {
        newPosition = 1;
      }
    }
    if (newPosition !== null) {
      newPosition = Math.max(newPosition, maxPositionSoFar);
      fixedColorStops[i] = {
        color: colorStop.color,
        position: newPosition
      };
      maxPositionSoFar = newPosition;
    } else {
      hasNullPositions = true;
    }
  }
  if (hasNullPositions) {
    var lastDefinedIndex = 0;
    for (var _i2 = 1; _i2 < fixedColorStops.length; _i2++) {
      if (fixedColorStops[_i2] !== undefined) {
        var unpositionedStops = _i2 - lastDefinedIndex - 1;
        if (unpositionedStops > 0) {
          var startPosition = fixedColorStops[lastDefinedIndex].position;
          var endPosition = fixedColorStops[_i2].position;
          var increment = (endPosition - startPosition) / (unpositionedStops + 1);
          for (var j = 1; j <= unpositionedStops; j++) {
            fixedColorStops[lastDefinedIndex + j] = {
              color: colorStops[lastDefinedIndex + j].color,
              position: startPosition + increment * j
            };
          }
        }
        lastDefinedIndex = _i2;
      }
    }
  }
  return fixedColorStops;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,