bfa2ec21b53884f28b262632ea656756
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKeyedChildListeners = useKeyedChildListeners;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function useKeyedChildListeners() {
  var _React$useRef = React.useRef(Object.assign(Object.create(null), {
      getState: {},
      beforeRemove: {}
    })),
    keyedListeners = _React$useRef.current;
  var addKeyedListener = React.useCallback(function (type, key, listener) {
    keyedListeners[type][key] = listener;
    return function () {
      keyedListeners[type][key] = undefined;
    };
  }, [keyedListeners]);
  return {
    keyedListeners: keyedListeners,
    addKeyedListener: addKeyedListener
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZjIiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJ1c2VLZXllZENoaWxkTGlzdGVuZXJzIiwiX1JlYWN0JHVzZVJlZiIsInVzZVJlZiIsImFzc2lnbiIsImNyZWF0ZSIsImdldFN0YXRlIiwiYmVmb3JlUmVtb3ZlIiwia2V5ZWRMaXN0ZW5lcnMiLCJjdXJyZW50IiwiYWRkS2V5ZWRMaXN0ZW5lciIsInVzZUNhbGxiYWNrIiwidHlwZSIsImtleSIsImxpc3RlbmVyIiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZUtleWVkQ2hpbGRMaXN0ZW5lcnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUErQixTQUFBQyx5QkFBQUMsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBO0VBQUEsSUFBQUMsQ0FBQSxPQUFBRCxPQUFBO0lBQUFFLENBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBO0lBQUEsT0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUE7RUFBQSxHQUFBRixDQUFBO0FBQUE7QUFBQSxTQUFBSCx3QkFBQUcsQ0FBQSxFQUFBRSxDQUFBO0VBQUEsS0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBO0VBQUEsYUFBQUEsQ0FBQSxvQkFBQUssUUFBQSxhQUFBTCxDQUFBLDBCQUFBQSxDQUFBO0lBQUEsV0FBQUE7RUFBQTtFQUFBLElBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQTtFQUFBLElBQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUE7RUFBQSxJQUFBUSxDQUFBO01BQUFDLFNBQUE7SUFBQTtJQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBO0VBQUEsU0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBO0lBQUEsSUFBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBO0lBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQTtFQUFBO0VBQUEsT0FBQU4sQ0FBQSxjQUFBUixDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUFBO0FBT3hCLFNBQVNXLHNCQUFzQkEsQ0FBQSxFQUFHO0VBQ3ZDLElBQUFDLGFBQUEsR0FBb0N4QixLQUFLLENBQUN5QixNQUFNLENBTTlDVixNQUFNLENBQUNXLE1BQU0sQ0FBQ1gsTUFBTSxDQUFDWSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDakNDLFFBQVEsRUFBRSxDQUFDLENBQUM7TUFDWkMsWUFBWSxFQUFFLENBQUM7SUFDakIsQ0FBQyxDQUNILENBQUM7SUFWZ0JDLGNBQUEsR0FBQU4sYUFBQSxDQUFUTyxPQUFPO0VBWWYsSUFBTUMsZ0JBQWdCLEdBQUdoQyxLQUFLLENBQUNpQyxXQUFXLENBQ3hDLFVBQ0VDLElBQU8sRUFDUEMsR0FBVyxFQUNYQyxRQUE2QixFQUMxQjtJQUVITixjQUFjLENBQUNJLElBQUksQ0FBQyxDQUFDQyxHQUFHLENBQUMsR0FBR0MsUUFBUTtJQUVwQyxPQUFPLFlBQU07TUFFWE4sY0FBYyxDQUFDSSxJQUFJLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLEdBQUdFLFNBQVM7SUFDdkMsQ0FBQztFQUNILENBQUMsRUFDRCxDQUFDUCxjQUFjLENBQ2pCLENBQUM7RUFFRCxPQUFPO0lBQ0xBLGNBQWMsRUFBZEEsY0FBYztJQUNkRSxnQkFBQSxFQUFBQTtFQUNGLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==