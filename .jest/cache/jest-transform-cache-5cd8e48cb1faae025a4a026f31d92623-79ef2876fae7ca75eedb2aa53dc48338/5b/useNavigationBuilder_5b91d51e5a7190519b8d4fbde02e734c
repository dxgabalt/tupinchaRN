74d41c3bb29d7e24a0e021ad10c73455
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault2(require("@babel/runtime/helpers/typeof"));
var _excluded = ["children", "layout", "screenOptions", "screenLayout", "screenListeners"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigationBuilder = useNavigationBuilder;
var _routers = require("@react-navigation/routers");
var React = _interopRequireWildcard(require("react"));
var _reactIs = require("react-is");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _deepFreeze = require("./deepFreeze.js");
var _Group = require("./Group.js");
var _isArrayEqual = require("./isArrayEqual.js");
var _isRecordEqual = require("./isRecordEqual.js");
var _NavigationHelpersContext = require("./NavigationHelpersContext.js");
var _NavigationRouteContext = require("./NavigationRouteContext.js");
var _NavigationStateContext = require("./NavigationStateContext.js");
var _PreventRemoveProvider = require("./PreventRemoveProvider.js");
var _Screen = require("./Screen.js");
var _types = require("./types.js");
var _useChildListeners = require("./useChildListeners.js");
var _useComponent = require("./useComponent.js");
var _useCurrentRender = require("./useCurrentRender.js");
var _useDescriptors = require("./useDescriptors.js");
var _useEventEmitter = require("./useEventEmitter.js");
var _useFocusedListenersChildrenAdapter = require("./useFocusedListenersChildrenAdapter.js");
var _useFocusEvents = require("./useFocusEvents.js");
var _useIsomorphicLayoutEffect = require("./useIsomorphicLayoutEffect");
var _useKeyedChildListeners = require("./useKeyedChildListeners.js");
var _useLazyValue = require("./useLazyValue.js");
var _useNavigationHelpers = require("./useNavigationHelpers.js");
var _useOnAction = require("./useOnAction.js");
var _useOnGetState = require("./useOnGetState.js");
var _useOnRouteFocus = require("./useOnRouteFocus.js");
var _useRegisterNavigator = require("./useRegisterNavigator.js");
var _useScheduleUpdate = require("./useScheduleUpdate.js");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    "default": e
  };
}
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
_types.PrivateValueStore;
var isValidKey = function isValidKey(key) {
  return key === undefined || typeof key === 'string' && key !== '';
};
var _getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions, groupLayout) {
  var configs = React.Children.toArray(children).reduce(function (acc, child) {
    var _child$type, _child$props;
    if (React.isValidElement(child)) {
      if (child.type === _Screen.Screen) {
        if (!isValidKey(child.props.navigationKey)) {
          throw new Error("Got an invalid 'navigationKey' prop (".concat(JSON.stringify(child.props.navigationKey), ") for the screen '").concat(child.props.name, "'. It must be a non-empty string or 'undefined'."));
        }
        acc.push({
          keys: [groupKey, child.props.navigationKey],
          options: groupOptions,
          layout: groupLayout,
          props: child.props
        });
        return acc;
      }
      if (child.type === React.Fragment || child.type === _Group.Group) {
        if (!isValidKey(child.props.navigationKey)) {
          throw new Error("Got an invalid 'navigationKey' prop (".concat(JSON.stringify(child.props.navigationKey), ") for the group. It must be a non-empty string or 'undefined'."));
        }
        acc.push.apply(acc, (0, _toConsumableArray2["default"])(_getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== _Group.Group ? groupOptions : groupOptions != null ? [].concat((0, _toConsumableArray2["default"])(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions], typeof child.props.screenLayout === 'function' ? child.props.screenLayout : groupLayout)));
        return acc;
      }
    }
    throw new Error("A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ".concat(React.isValidElement(child) ? "'".concat(typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name, "'").concat(child.props != null && (0, _typeof2["default"])(child.props) === 'object' && 'name' in child.props && (_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? " for the screen '".concat(child.props.name, "'") : '') : (0, _typeof2["default"])(child) === 'object' ? JSON.stringify(child) : "'".concat(String(child), "'"), "). To render this component in the navigator, pass it in the 'component' prop to 'Screen'."));
  }, []);
  if (process.env.NODE_ENV !== 'production') {
    configs.forEach(function (config) {
      var _config$props = config.props,
        name = _config$props.name,
        children = _config$props.children,
        component = _config$props.component,
        getComponent = _config$props.getComponent;
      if (typeof name !== 'string' || !name) {
        throw new Error("Got an invalid name (".concat(JSON.stringify(name), ") for the screen. It must be a non-empty string."));
      }
      if (children != null || component !== undefined || getComponent !== undefined) {
        if (children != null && component !== undefined) {
          throw new Error("Got both 'component' and 'children' props for the screen '".concat(name, "'. You must pass only one of them."));
        }
        if (children != null && getComponent !== undefined) {
          throw new Error("Got both 'getComponent' and 'children' props for the screen '".concat(name, "'. You must pass only one of them."));
        }
        if (component !== undefined && getComponent !== undefined) {
          throw new Error("Got both 'component' and 'getComponent' props for the screen '".concat(name, "'. You must pass only one of them."));
        }
        if (children != null && typeof children !== 'function') {
          throw new Error("Got an invalid value for 'children' prop for the screen '".concat(name, "'. It must be a function returning a React Element."));
        }
        if (component !== undefined && !(0, _reactIs.isValidElementType)(component)) {
          throw new Error("Got an invalid value for 'component' prop for the screen '".concat(name, "'. It must be a valid React Component."));
        }
        if (getComponent !== undefined && typeof getComponent !== 'function') {
          throw new Error("Got an invalid value for 'getComponent' prop for the screen '".concat(name, "'. It must be a function returning a React Component."));
        }
        if (typeof component === 'function') {
          if (component.name === 'component') {
            console.warn("Looks like you're passing an inline function for 'component' prop for the screen '".concat(name, "' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour."));
          } else if (/^[a-z]/.test(component.name)) {
            console.warn("Got a component with the name '".concat(component.name, "' for the screen '").concat(name, "'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name."));
          }
        }
      } else {
        throw new Error("Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '".concat(name, "'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing."));
      }
    });
  }
  return configs;
};
function useNavigationBuilder(createRouter, options) {
  var navigatorKey = (0, _useRegisterNavigator.useRegisterNavigator)();
  var route = React.useContext(_NavigationRouteContext.NavigationRouteContext);
  var children = options.children,
    layout = options.layout,
    screenOptions = options.screenOptions,
    screenLayout = options.screenLayout,
    screenListeners = options.screenListeners,
    rest = (0, _objectWithoutProperties2["default"])(options, _excluded);
  var routeConfigs = _getRouteConfigsFromChildren(children);
  var router = (0, _useLazyValue.useLazyValue)(function () {
    if (rest.initialRouteName != null && routeConfigs.every(function (config) {
      return config.props.name !== rest.initialRouteName;
    })) {
      throw new Error("Couldn't find a screen named '".concat(rest.initialRouteName, "' to use as 'initialRouteName'."));
    }
    return createRouter(rest);
  });
  var screens = routeConfigs.reduce(function (acc, config) {
    if (config.props.name in acc) {
      throw new Error("A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '".concat(config.props.name, "')"));
    }
    acc[config.props.name] = config;
    return acc;
  }, {});
  var routeNames = routeConfigs.map(function (config) {
    return config.props.name;
  });
  var routeKeyList = routeNames.reduce(function (acc, curr) {
    acc[curr] = screens[curr].keys.map(function (key) {
      return key !== null && key !== void 0 ? key : '';
    }).join(':');
    return acc;
  }, {});
  var routeParamList = routeNames.reduce(function (acc, curr) {
    var initialParams = screens[curr].props.initialParams;
    acc[curr] = initialParams;
    return acc;
  }, {});
  var routeGetIdList = routeNames.reduce(function (acc, curr) {
    return Object.assign(acc, (0, _defineProperty2["default"])({}, curr, screens[curr].props.getId));
  }, {});
  if (!routeNames.length) {
    throw new Error("Couldn't find any screens for the navigator. Have you defined any screens as its children?");
  }
  var isStateValid = React.useCallback(function (state) {
    return state.type === undefined || state.type === router.type;
  }, [router.type]);
  var isStateInitialized = React.useCallback(function (state) {
    return state !== undefined && state.stale === false && isStateValid(state);
  }, [isStateValid]);
  var _React$useContext = React.useContext(_NavigationStateContext.NavigationStateContext),
    currentState = _React$useContext.state,
    getCurrentState = _React$useContext.getState,
    setCurrentState = _React$useContext.setState,
    setKey = _React$useContext.setKey,
    getKey = _React$useContext.getKey,
    getIsInitial = _React$useContext.getIsInitial;
  var stateCleanedUp = React.useRef(false);
  var setState = (0, _useLatestCallback["default"])(function (state) {
    if (stateCleanedUp.current) {
      return;
    }
    setCurrentState(state);
  });
  var _React$useMemo = React.useMemo(function () {
      var _route$params4, _route$params5, _route$params6;
      var initialRouteParamList = routeNames.reduce(function (acc, curr) {
        var _route$params, _route$params2, _route$params3;
        var initialParams = screens[curr].props.initialParams;
        var initialParamsFromParams = (route === null || route === void 0 || (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 || (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 || (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;
        acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;
        return acc;
      }, {});
      if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 || (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null && !(typeof (route === null || route === void 0 || (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.screen) === 'string' && (route === null || route === void 0 || (_route$params6 = route.params) === null || _route$params6 === void 0 ? void 0 : _route$params6.initial) !== false)) {
        return [router.getInitialState({
          routeNames: routeNames,
          routeParamList: initialRouteParamList,
          routeGetIdList: routeGetIdList
        }), true];
      } else {
        var _route$params7, _route$params8, _route$params9;
        var stateFromParams;
        if ((route === null || route === void 0 || (_route$params7 = route.params) === null || _route$params7 === void 0 ? void 0 : _route$params7.state) != null) {
          stateFromParams = route.params.state;
        } else if (typeof (route === null || route === void 0 || (_route$params8 = route.params) === null || _route$params8 === void 0 ? void 0 : _route$params8.screen) === 'string' && (route === null || route === void 0 || (_route$params9 = route.params) === null || _route$params9 === void 0 ? void 0 : _route$params9.initial) !== false) {
          stateFromParams = {
            index: 0,
            routes: [{
              name: route.params.screen,
              params: route.params.params,
              path: route.params.path
            }]
          };
        }
        return [router.getRehydratedState(stateFromParams !== null && stateFromParams !== void 0 ? stateFromParams : currentState, {
          routeNames: routeNames,
          routeParamList: initialRouteParamList,
          routeGetIdList: routeGetIdList
        }), false];
      }
    }, [currentState, router, isStateValid]),
    _React$useMemo2 = (0, _slicedToArray2["default"])(_React$useMemo, 2),
    initializedState = _React$useMemo2[0],
    isFirstStateInitialization = _React$useMemo2[1];
  var previousRouteKeyListRef = React.useRef(routeKeyList);
  React.useEffect(function () {
    previousRouteKeyListRef.current = routeKeyList;
  });
  var previousRouteKeyList = previousRouteKeyListRef.current;
  var state = isStateInitialized(currentState) ? currentState : initializedState;
  var nextState = state;
  if (!(0, _isArrayEqual.isArrayEqual)(state.routeNames, routeNames) || !(0, _isRecordEqual.isRecordEqual)(routeKeyList, previousRouteKeyList)) {
    var _options$UNSTABLE_get;
    var navigatorStateForNextRouteNamesChange = (_options$UNSTABLE_get = options.UNSTABLE_getStateForRouteNamesChange) === null || _options$UNSTABLE_get === void 0 ? void 0 : _options$UNSTABLE_get.call(options, state);
    nextState = navigatorStateForNextRouteNamesChange ? router.getRehydratedState(navigatorStateForNextRouteNamesChange, {
      routeNames: routeNames,
      routeParamList: routeParamList,
      routeGetIdList: routeGetIdList
    }) : router.getStateForRouteNamesChange(state, {
      routeNames: routeNames,
      routeParamList: routeParamList,
      routeGetIdList: routeGetIdList,
      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {
        return name in previousRouteKeyList && routeKeyList[name] !== previousRouteKeyList[name];
      })
    });
  }
  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);
  React.useEffect(function () {
    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;
  }, [route === null || route === void 0 ? void 0 : route.params]);
  if (route !== null && route !== void 0 && route.params) {
    var previousParams = previousNestedParamsRef.current;
    var action;
    if ((0, _typeof2["default"])(route.params.state) === 'object' && route.params.state != null && route.params !== previousParams) {
      action = _routers.CommonActions.reset(route.params.state);
    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {
      action = _routers.CommonActions.navigate({
        name: route.params.screen,
        params: route.params.params,
        path: route.params.path
      });
    }
    var updatedState = action ? router.getStateForAction(nextState, action, {
      routeNames: routeNames,
      routeParamList: routeParamList,
      routeGetIdList: routeGetIdList
    }) : null;
    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {
      routeNames: routeNames,
      routeParamList: routeParamList,
      routeGetIdList: routeGetIdList
    }) : nextState;
  }
  var shouldUpdate = state !== nextState;
  (0, _useScheduleUpdate.useScheduleUpdate)(function () {
    if (shouldUpdate) {
      setState(nextState);
    }
  });
  state = nextState;
  React.useEffect(function () {
    stateCleanedUp.current = false;
    setKey(navigatorKey);
    if (!getIsInitial()) {
      setState(nextState);
    }
    return function () {
      if (getCurrentState() !== undefined && getKey() === navigatorKey) {
        setCurrentState(undefined);
        stateCleanedUp.current = true;
      }
    };
  }, []);
  var stateRef = React.useRef(state);
  stateRef.current = state;
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    stateRef.current = null;
  });
  var getState = (0, _useLatestCallback["default"])(function () {
    var currentState = getCurrentState();
    return (0, _deepFreeze.deepFreeze)(isStateInitialized(currentState) ? currentState : initializedState);
  });
  var emitter = (0, _useEventEmitter.useEventEmitter)(function (e) {
    var _ref;
    var routeNames = [];
    var route;
    if (e.target) {
      var _route;
      route = state.routes.find(function (route) {
        return route.key === e.target;
      });
      if ((_route = route) !== null && _route !== void 0 && _route.name) {
        routeNames.push(route.name);
      }
    } else {
      route = state.routes[state.index];
      routeNames.push.apply(routeNames, (0, _toConsumableArray2["default"])(Object.keys(screens).filter(function (name) {
        var _route2;
        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;
      })));
    }
    if (route == null) {
      return;
    }
    var navigation = descriptors[route.key].navigation;
    var listeners = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2["default"])([screenListeners].concat((0, _toConsumableArray2["default"])(routeNames.map(function (name) {
      var listeners = screens[name].props.listeners;
      return listeners;
    }))).map(function (listeners) {
      var map = typeof listeners === 'function' ? listeners({
        route: route,
        navigation: navigation
      }) : listeners;
      return map ? Object.keys(map).filter(function (type) {
        return type === e.type;
      }).map(function (type) {
        return map === null || map === void 0 ? void 0 : map[type];
      }) : undefined;
    }))).filter(function (cb, i, self) {
      return cb && self.lastIndexOf(cb) === i;
    });
    listeners.forEach(function (listener) {
      return listener === null || listener === void 0 ? void 0 : listener(e);
    });
  });
  (0, _useFocusEvents.useFocusEvents)({
    state: state,
    emitter: emitter
  });
  React.useEffect(function () {
    emitter.emit({
      type: 'state',
      data: {
        state: state
      }
    });
  }, [emitter, state]);
  var _ref2 = (0, _useChildListeners.useChildListeners)(),
    childListeners = _ref2.listeners,
    addListener = _ref2.addListener;
  var _ref3 = (0, _useKeyedChildListeners.useKeyedChildListeners)(),
    keyedListeners = _ref3.keyedListeners,
    addKeyedListener = _ref3.addKeyedListener;
  var onAction = (0, _useOnAction.useOnAction)({
    router: router,
    getState: getState,
    setState: setState,
    key: route === null || route === void 0 ? void 0 : route.key,
    actionListeners: childListeners.action,
    beforeRemoveListeners: keyedListeners.beforeRemove,
    routerConfigOptions: {
      routeNames: routeNames,
      routeParamList: routeParamList,
      routeGetIdList: routeGetIdList
    },
    emitter: emitter
  });
  var onRouteFocus = (0, _useOnRouteFocus.useOnRouteFocus)({
    router: router,
    key: route === null || route === void 0 ? void 0 : route.key,
    getState: getState,
    setState: setState
  });
  var navigation = (0, _useNavigationHelpers.useNavigationHelpers)({
    id: options.id,
    onAction: onAction,
    getState: getState,
    emitter: emitter,
    router: router,
    stateRef: stateRef
  });
  (0, _useFocusedListenersChildrenAdapter.useFocusedListenersChildrenAdapter)({
    navigation: navigation,
    focusedListeners: childListeners.focus
  });
  (0, _useOnGetState.useOnGetState)({
    getState: getState,
    getStateListeners: keyedListeners.getState
  });
  var _ref4 = (0, _useDescriptors.useDescriptors)({
      state: state,
      screens: screens,
      navigation: navigation,
      screenOptions: screenOptions,
      screenLayout: screenLayout,
      onAction: onAction,
      getState: getState,
      setState: setState,
      onRouteFocus: onRouteFocus,
      addListener: addListener,
      addKeyedListener: addKeyedListener,
      router: router,
      emitter: emitter
    }),
    describe = _ref4.describe,
    descriptors = _ref4.descriptors;
  (0, _useCurrentRender.useCurrentRender)({
    state: state,
    navigation: navigation,
    descriptors: descriptors
  });
  var NavigationContent = (0, _useComponent.useComponent)(function (children) {
    var element = layout != null ? layout({
      state: state,
      descriptors: descriptors,
      navigation: navigation,
      children: children
    }) : children;
    return (0, _jsxRuntime.jsx)(_NavigationHelpersContext.NavigationHelpersContext.Provider, {
      value: navigation,
      children: (0, _jsxRuntime.jsx)(_PreventRemoveProvider.PreventRemoveProvider, {
        children: element
      })
    });
  });
  return {
    state: state,
    navigation: navigation,
    describe: describe,
    descriptors: descriptors,
    NavigationContent: NavigationContent
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,