01c08bbde2bf26b6eae713f7290dc8b2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2["default"])(o), (0, _possibleConstructorReturn2["default"])(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2["default"])(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
module.exports = function (moduleName, instanceMethods, isESModule) {
  var _Class;
  var RealComponent = isESModule ? jest.requireActual(moduleName)["default"] : jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' && RealComponent.prototype.constructor instanceof React.Component ? RealComponent : React.Component;
  var name = RealComponent.displayName || RealComponent.name || (RealComponent.render ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_Class = function (_SuperClass) {
    function Component() {
      (0, _classCallCheck2["default"])(this, Component);
      return _callSuper(this, Component, arguments);
    }
    (0, _inherits2["default"])(Component, _SuperClass);
    return (0, _createClass2["default"])(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(nameWithoutPrefix, props, this.props.children);
      }
    }]);
  }(SuperClass), _Class.displayName = 'Component', _Class);
  Object.defineProperty(Component, 'name', {
    value: name,
    writable: false,
    enumerable: false,
    configurable: true
  });
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfY2FsbFN1cGVyIiwidCIsIm8iLCJlIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZU5hbWUiLCJpbnN0YW5jZU1ldGhvZHMiLCJpc0VTTW9kdWxlIiwiX0NsYXNzIiwiUmVhbENvbXBvbmVudCIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiUmVhY3QiLCJTdXBlckNsYXNzIiwiQ29tcG9uZW50IiwibmFtZSIsImRpc3BsYXlOYW1lIiwicmVuZGVyIiwibmFtZVdpdGhvdXRQcmVmaXgiLCJyZXBsYWNlIiwiX1N1cGVyQ2xhc3MiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsIl90aGlzIiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWZhdWx0UHJvcHMiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJ1bmRlZmluZWQiLCJjcmVhdGVFbGVtZW50IiwiY2hpbGRyZW4iLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImNsYXNzU3RhdGljIl0sInNvdXJjZXMiOlsibW9ja0NvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSAobW9kdWxlTmFtZSwgaW5zdGFuY2VNZXRob2RzLCBpc0VTTW9kdWxlKSA9PiB7XG4gIGNvbnN0IFJlYWxDb21wb25lbnQgPSBpc0VTTW9kdWxlXG4gICAgPyBqZXN0LnJlcXVpcmVBY3R1YWwobW9kdWxlTmFtZSkuZGVmYXVsdFxuICAgIDogamVzdC5yZXF1aXJlQWN0dWFsKG1vZHVsZU5hbWUpO1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbiAgY29uc3QgU3VwZXJDbGFzcyA9XG4gICAgdHlwZW9mIFJlYWxDb21wb25lbnQgPT09ICdmdW5jdGlvbicgJiZcbiAgICBSZWFsQ29tcG9uZW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciBpbnN0YW5jZW9mIFJlYWN0LkNvbXBvbmVudFxuICAgICAgPyBSZWFsQ29tcG9uZW50XG4gICAgICA6IFJlYWN0LkNvbXBvbmVudDtcblxuICBjb25zdCBuYW1lID1cbiAgICBSZWFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgUmVhbENvbXBvbmVudC5uYW1lIHx8XG4gICAgKFJlYWxDb21wb25lbnQucmVuZGVyIC8vIGhhbmRsZSBSZWFjdC5mb3J3YXJkUmVmXG4gICAgICA/IFJlYWxDb21wb25lbnQucmVuZGVyLmRpc3BsYXlOYW1lIHx8IFJlYWxDb21wb25lbnQucmVuZGVyLm5hbWVcbiAgICAgIDogJ1Vua25vd24nKTtcblxuICBjb25zdCBuYW1lV2l0aG91dFByZWZpeCA9IG5hbWUucmVwbGFjZSgvXihSQ1R8UkspLywgJycpO1xuXG4gIGNvbnN0IENvbXBvbmVudCA9IGNsYXNzIGV4dGVuZHMgU3VwZXJDbGFzcyB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NvbXBvbmVudCc7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIFJlYWxDb21wb25lbnQuZGVmYXVsdFByb3BzKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBqdXN0IGFzc2lnbiBwcm9wcyBvbiB0b3Agb2YgZGVmYXVsdFByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSBSZWFjdCB0cmVhdHMgdW5kZWZpbmVkIGFzIHNwZWNpYWwgYW5kIGRpZmZlcmVudCBmcm9tIG51bGwuXG4gICAgICAgICAgLy8gSWYgYSBwcm9wIGlzIHNwZWNpZmllZCBidXQgc2V0IHRvIHVuZGVmaW5lZCBpdCBpcyBpZ25vcmVkIGFuZCB0aGVcbiAgICAgICAgICAvLyBkZWZhdWx0IHByb3AgaXMgdXNlZCBpbnN0ZWFkLiBJZiBpdCBpcyBzZXQgdG8gbnVsbCwgdGhlbiB0aGVcbiAgICAgICAgICAvLyBudWxsIHZhbHVlIG92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSB0aGlzLnByb3BzW3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KG5hbWVXaXRob3V0UHJlZml4LCBwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnQsICduYW1lJywge1xuICAgIHZhbHVlOiBuYW1lLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gIH0pO1xuXG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IG5hbWVXaXRob3V0UHJlZml4O1xuXG4gIE9iamVjdC5rZXlzKFJlYWxDb21wb25lbnQpLmZvckVhY2goY2xhc3NTdGF0aWMgPT4ge1xuICAgIENvbXBvbmVudFtjbGFzc1N0YXRpY10gPSBSZWFsQ29tcG9uZW50W2NsYXNzU3RhdGljXTtcbiAgfSk7XG5cbiAgaWYgKGluc3RhbmNlTWV0aG9kcyAhPSBudWxsKSB7XG4gICAgT2JqZWN0LmFzc2lnbihDb21wb25lbnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRywyQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksZ0JBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLFVBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFNLFdBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsT0FBQUosZ0JBQUEsYUFBQUksQ0FBQSxPQUFBTCwyQkFBQSxhQUFBSSxDQUFBLEVBQUFHLHlCQUFBLEtBQUFDLE9BQUEsQ0FBQUMsU0FBQSxDQUFBSixDQUFBLEVBQUFDLENBQUEsWUFBQUwsZ0JBQUEsYUFBQUcsQ0FBQSxFQUFBTSxXQUFBLElBQUFMLENBQUEsQ0FBQU0sS0FBQSxDQUFBUCxDQUFBLEVBQUFFLENBQUE7QUFBQSxTQUFBQywwQkFBQSxjQUFBSCxDQUFBLElBQUFRLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVAsT0FBQSxDQUFBQyxTQUFBLENBQUFHLE9BQUEsaUNBQUFSLENBQUEsYUFBQUcseUJBQUEsWUFBQUEsMEJBQUEsYUFBQUgs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