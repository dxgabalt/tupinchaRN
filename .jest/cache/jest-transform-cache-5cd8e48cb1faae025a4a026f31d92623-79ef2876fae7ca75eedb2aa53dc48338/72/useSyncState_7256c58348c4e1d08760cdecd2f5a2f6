3512caff960440d002712252df566103
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof2 = _interopRequireDefault2(require("@babel/runtime/helpers/typeof"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSyncState = useSyncState;
var React = _interopRequireWildcard(require("react"));
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _deepFreeze = require("./deepFreeze.js");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    "default": e
  };
}
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
var createStore = function createStore(getInitialState) {
  var listeners = [];
  var initialized = false;
  var state;
  var getState = function getState() {
    if (initialized) {
      return state;
    }
    initialized = true;
    state = (0, _deepFreeze.deepFreeze)(getInitialState());
    return state;
  };
  var isBatching = false;
  var didUpdate = false;
  var setState = function setState(newState) {
    state = (0, _deepFreeze.deepFreeze)(newState);
    didUpdate = true;
    if (!isBatching) {
      listeners.forEach(function (listener) {
        return listener();
      });
    }
  };
  var subscribe = function subscribe(callback) {
    listeners.push(callback);
    return function () {
      var index = listeners.indexOf(callback);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  };
  var batchUpdates = function batchUpdates(callback) {
    isBatching = true;
    callback();
    isBatching = false;
    if (didUpdate) {
      didUpdate = false;
      listeners.forEach(function (listener) {
        return listener();
      });
    }
  };
  return {
    getState: getState,
    setState: setState,
    batchUpdates: batchUpdates,
    subscribe: subscribe
  };
};
function useSyncState(getInitialState) {
  var store = React.useRef(createStore(getInitialState)).current;
  var state = React.useSyncExternalStore(store.subscribe, store.getState, store.getState);
  React.useDebugValue(state);
  var pendingUpdatesRef = React.useRef([]);
  var scheduleUpdate = (0, _useLatestCallback["default"])(function (callback) {
    pendingUpdatesRef.current.push(callback);
  });
  var flushUpdates = (0, _useLatestCallback["default"])(function () {
    var pendingUpdates = pendingUpdatesRef.current;
    pendingUpdatesRef.current = [];
    if (pendingUpdates.length !== 0) {
      store.batchUpdates(function () {
        var _iterator = _createForOfIteratorHelper(pendingUpdates),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var update = _step.value;
            update();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  });
  return {
    state: state,
    getState: store.getState,
    setState: store.setState,
    scheduleUpdate: scheduleUpdate,
    flushUpdates: flushUpdates
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91c2VMYXRlc3RDYWxsYmFjayIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZGVlcEZyZWV6ZSIsImUiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsInIiLCJ0IiwiX3R5cGVvZjIiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJjcmVhdGVTdG9yZSIsImdldEluaXRpYWxTdGF0ZSIsImxpc3RlbmVycyIsImluaXRpYWxpemVkIiwic3RhdGUiLCJnZXRTdGF0ZSIsImRlZXBGcmVlemUiLCJpc0JhdGNoaW5nIiwiZGlkVXBkYXRlIiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsImZvckVhY2giLCJsaXN0ZW5lciIsInN1YnNjcmliZSIsImNhbGxiYWNrIiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImJhdGNoVXBkYXRlcyIsInVzZVN5bmNTdGF0ZSIsInN0b3JlIiwidXNlUmVmIiwiY3VycmVudCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlRGVidWdWYWx1ZSIsInBlbmRpbmdVcGRhdGVzUmVmIiwic2NoZWR1bGVVcGRhdGUiLCJmbHVzaFVwZGF0ZXMiLCJwZW5kaW5nVXBkYXRlcyIsImxlbmd0aCIsIl9pdGVyYXRvciIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwiX3N0ZXAiLCJzIiwiZG9uZSIsInVwZGF0ZSIsInZhbHVlIiwiZXJyIiwiZiJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VTeW5jU3RhdGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUFBLEtB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