9b0efb4f4756a322cc34c0c4aa07f52e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsFocused = useIsFocused;
var React = _interopRequireWildcard(require("react"));
var _useNavigation = require("./useNavigation.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function useIsFocused() {
  var navigation = (0, _useNavigation.useNavigation)();
  var subscribe = React.useCallback(function (callback) {
    var unsubscribeFocus = navigation.addListener('focus', callback);
    var unsubscribeBlur = navigation.addListener('blur', callback);
    return function () {
      unsubscribeFocus();
      unsubscribeBlur();
    };
  }, [navigation]);
  var value = React.useSyncExternalStore(subscribe, navigation.isFocused, navigation.isFocused);
  return value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91c2VOYXZpZ2F0aW9uIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mMiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsInVzZUlzRm9jdXNlZCIsIm5hdmlnYXRpb24iLCJ1c2VOYXZpZ2F0aW9uIiwic3Vic2NyaWJlIiwidXNlQ2FsbGJhY2siLCJjYWxsYmFjayIsInVuc3Vic2NyaWJlRm9jdXMiLCJhZGRMaXN0ZW5lciIsInVuc3Vic2NyaWJlQmx1ciIsInZhbHVlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJpc0ZvY3VzZWQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXNlSXNGb2N1c2VkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyxjQUFBLEdBQUFELE9BQUE7QUFBZ0QsU0FBQUUseUJBQUFDLENBQUE7RUFBQSx5QkFBQUMsT0FBQTtFQUFBLElBQUFDLENBQUEsT0FBQUQsT0FBQTtJQUFBRSxDQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQTtJQUFBLE9BQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBO0VBQUEsR0FBQUYsQ0FBQTtBQUFBO0FBQUEsU0FBQUosd0JBQUFJLENBQUEsRUFBQUUsQ0FBQTtFQUFBLEtBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQTtFQUFBLGFBQUFBLENBQUEsb0JBQUFLLFFBQUEsYUFBQUwsQ0FBQSwwQkFBQUEsQ0FBQTtJQUFBLFdBQUFBO0VBQUE7RUFBQSxJQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUE7RUFBQSxJQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBO0VBQUEsSUFBQVEsQ0FBQTtNQUFBQyxTQUFBO0lBQUE7SUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQTtJQUFBLElBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQTtJQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUE7RUFBQTtFQUFBLE9BQUFOLENBQUEsY0FBQVIsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFBQTtBQU16QyxTQUFTVyxZQUFZQSxDQUFBLEVBQVk7RUFDdEMsSUFBTUMsVUFBVSxHQUFHLElBQUF0QixjQUFBLENBQUF1QixhQUFhLEVBQUMsQ0FBQztFQUVsQyxJQUFNQyxTQUFTLEdBQUczQixLQUFLLENBQUM0QixXQUFXLENBQ2hDLFVBQUFDLFFBQW9CLEVBQUs7SUFDeEIsSUFBTUMsZ0JBQWdCLEdBQUdMLFVBQVUsQ0FBQ00sV0FBVyxDQUFDLE9BQU8sRUFBRUYsUUFBUSxDQUFDO0lBQ2xFLElBQU1HLGVBQWUsR0FBR1AsVUFBVSxDQUFDTSxXQUFXLENBQUMsTUFBTSxFQUFFRixRQUFRLENBQUM7SUFFaEUsT0FBTyxZQUFNO01BQ1hDLGdCQUFnQixDQUFDLENBQUM7TUFDbEJFLGVBQWUsQ0FBQyxDQUFDO0lBQ25CLENBQUM7RUFDSCxDQUFDLEVBQ0QsQ0FBQ1AsVUFBVSxDQUNiLENBQUM7RUFFRCxJQUFNUSxLQUFLLEdBQUdqQyxLQUFLLENBQUNrQyxvQkFBb0IsQ0FDdENQLFNBQVMsRUFDVEYsVUFBVSxDQUFDVSxTQUFTLEVBQ3BCVixVQUFVLENBQUNVLFNBQ2IsQ0FBQztFQUVELE9BQU9GLEtBQUs7QUFDZCIsImlnbm9yZUxpc3QiOltdfQ==