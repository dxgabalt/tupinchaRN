{"version":3,"names":["_processColor","_interopRequireDefault","require","_createForOfIteratorHelper","r","e","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","processBoxShadow","rawBoxShadows","result","boxShadowList","parseBoxShadowString","replace","_iterator","_step","rawBoxShadow","parsedBoxShadow","offsetX","offsetY","arg","parseLength","spreadDistance","blurRadius","color","processColor","inset","push","err","_iterator2","split","map","bS","trim","filter","_step2","boxShadow","keywordDetectedAfterLength","lengthCount","args","_iterator3","_step3","processedColor","argsWithUnitsRegex","match","exec","Number","isNaN"],"sources":["processBoxShadow.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @oncall react-native\n */\n\nimport type {ProcessedColorValue} from './processColor';\nimport type {BoxShadowValue} from './StyleSheetTypes';\n\nimport processColor from './processColor';\n\nexport type ParsedBoxShadow = {\n  offsetX: number,\n  offsetY: number,\n  color?: ProcessedColorValue,\n  blurRadius?: number,\n  spreadDistance?: number,\n  inset?: boolean,\n};\n\nexport default function processBoxShadow(\n  rawBoxShadows: ?($ReadOnlyArray<BoxShadowValue> | string),\n): Array<ParsedBoxShadow> {\n  const result: Array<ParsedBoxShadow> = [];\n  if (rawBoxShadows == null) {\n    return result;\n  }\n\n  const boxShadowList =\n    typeof rawBoxShadows === 'string'\n      ? parseBoxShadowString(rawBoxShadows.replace(/\\n/g, ' '))\n      : rawBoxShadows;\n\n  for (const rawBoxShadow of boxShadowList) {\n    const parsedBoxShadow: ParsedBoxShadow = {\n      offsetX: 0,\n      offsetY: 0,\n    };\n\n    let value;\n    for (const arg in rawBoxShadow) {\n      switch (arg) {\n        case 'offsetX':\n          value =\n            typeof rawBoxShadow.offsetX === 'string'\n              ? parseLength(rawBoxShadow.offsetX)\n              : rawBoxShadow.offsetX;\n          if (value == null) {\n            return [];\n          }\n\n          parsedBoxShadow.offsetX = value;\n          break;\n        case 'offsetY':\n          value =\n            typeof rawBoxShadow.offsetY === 'string'\n              ? parseLength(rawBoxShadow.offsetY)\n              : rawBoxShadow.offsetY;\n          if (value == null) {\n            return [];\n          }\n\n          parsedBoxShadow.offsetY = value;\n          break;\n        case 'spreadDistance':\n          value =\n            typeof rawBoxShadow.spreadDistance === 'string'\n              ? parseLength(rawBoxShadow.spreadDistance)\n              : rawBoxShadow.spreadDistance;\n          if (value == null) {\n            return [];\n          }\n\n          parsedBoxShadow.spreadDistance = value;\n          break;\n        case 'blurRadius':\n          value =\n            typeof rawBoxShadow.blurRadius === 'string'\n              ? parseLength(rawBoxShadow.blurRadius)\n              : rawBoxShadow.blurRadius;\n          if (value == null || value < 0) {\n            return [];\n          }\n\n          parsedBoxShadow.blurRadius = value;\n          break;\n        case 'color':\n          const color = processColor(rawBoxShadow.color);\n          if (color == null) {\n            return [];\n          }\n\n          parsedBoxShadow.color = color;\n          break;\n        case 'inset':\n          parsedBoxShadow.inset = rawBoxShadow.inset;\n      }\n    }\n    result.push(parsedBoxShadow);\n  }\n  return result;\n}\n\nfunction parseBoxShadowString(rawBoxShadows: string): Array<BoxShadowValue> {\n  let result: Array<BoxShadowValue> = [];\n\n  for (const rawBoxShadow of rawBoxShadows\n    .split(/,(?![^()]*\\))/) // split by comma that is not in parenthesis\n    .map(bS => bS.trim())\n    .filter(bS => bS !== '')) {\n    const boxShadow: BoxShadowValue = {\n      offsetX: 0,\n      offsetY: 0,\n    };\n    let offsetX: number | string;\n    let offsetY: number | string;\n    let keywordDetectedAfterLength = false;\n\n    let lengthCount = 0;\n\n    // split rawBoxShadow string by all whitespaces that are not in parenthesis\n    const args = rawBoxShadow.split(/\\s+(?![^(]*\\))/);\n    for (const arg of args) {\n      const processedColor = processColor(arg);\n      if (processedColor != null) {\n        if (boxShadow.color != null) {\n          return [];\n        }\n        if (offsetX != null) {\n          keywordDetectedAfterLength = true;\n        }\n        boxShadow.color = arg;\n        continue;\n      }\n\n      if (arg === 'inset') {\n        if (boxShadow.inset != null) {\n          return [];\n        }\n        if (offsetX != null) {\n          keywordDetectedAfterLength = true;\n        }\n        boxShadow.inset = true;\n        continue;\n      }\n\n      switch (lengthCount) {\n        case 0:\n          offsetX = arg;\n          lengthCount++;\n          break;\n        case 1:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          offsetY = arg;\n          lengthCount++;\n          break;\n        case 2:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          boxShadow.blurRadius = arg;\n          lengthCount++;\n          break;\n        case 3:\n          if (keywordDetectedAfterLength) {\n            return [];\n          }\n          boxShadow.spreadDistance = arg;\n          lengthCount++;\n          break;\n        default:\n          return [];\n      }\n    }\n\n    if (offsetX == null || offsetY == null) {\n      return [];\n    }\n\n    boxShadow.offsetX = offsetX;\n    boxShadow.offsetY = offsetY;\n\n    result.push(boxShadow);\n  }\n  return result;\n}\n\nfunction parseLength(length: string): ?number {\n  // matches on args with units like \"1.5 5% -80deg\"\n  const argsWithUnitsRegex = /([+-]?\\d*(\\.\\d+)?)([\\w\\W]+)?/g;\n  const match = argsWithUnitsRegex.exec(length);\n\n  if (!match || Number.isNaN(match[1])) {\n    return null;\n  }\n\n  if (match[3] != null && match[3] !== 'px') {\n    return null;\n  }\n\n  return Number(match[1]);\n}\n"],"mappings":"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","ignoreList":[]}