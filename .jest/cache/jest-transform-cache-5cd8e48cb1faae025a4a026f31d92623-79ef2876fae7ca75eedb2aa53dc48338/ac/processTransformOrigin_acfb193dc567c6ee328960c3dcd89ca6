3c113da7cb34080cc5bd077719f0a976
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processTransformOrigin;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _invariant = _interopRequireDefault(require("invariant"));
var INDEX_X = 0;
var INDEX_Y = 1;
var INDEX_Z = 2;
function processTransformOrigin(transformOrigin) {
  if (typeof transformOrigin === 'string') {
    var transformOriginString = transformOrigin;
    var regex = /(top|bottom|left|right|center|\d+(?:%|px)|0)/gi;
    var transformOriginArray = ['50%', '50%', 0];
    var index = INDEX_X;
    var matches;
    outer: while (matches = regex.exec(transformOriginString)) {
      var nextIndex = index + 1;
      var value = matches[0];
      var valueLower = value.toLowerCase();
      switch (valueLower) {
        case 'left':
        case 'right':
          {
            (0, _invariant["default"])(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);
            transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';
            break;
          }
        case 'top':
        case 'bottom':
          {
            (0, _invariant["default"])(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);
            transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';
            if (index === INDEX_X) {
              var horizontal = regex.exec(transformOriginString);
              if (horizontal == null) {
                break outer;
              }
              switch (horizontal[0].toLowerCase()) {
                case 'left':
                  transformOriginArray[INDEX_X] = 0;
                  break;
                case 'right':
                  transformOriginArray[INDEX_X] = '100%';
                  break;
                case 'center':
                  transformOriginArray[INDEX_X] = '50%';
                  break;
                default:
                  (0, _invariant["default"])(false, 'Could not parse transform-origin: %s', transformOriginString);
              }
              nextIndex = INDEX_Z;
            }
            break;
          }
        case 'center':
          {
            (0, _invariant["default"])(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);
            transformOriginArray[index] = '50%';
            break;
          }
        default:
          {
            if (value.endsWith('%')) {
              transformOriginArray[index] = value;
            } else {
              transformOriginArray[index] = parseFloat(value);
            }
            break;
          }
      }
      index = nextIndex;
    }
    transformOrigin = transformOriginArray;
  }
  if (__DEV__) {
    _validateTransformOrigin(transformOrigin);
  }
  return transformOrigin;
}
function _validateTransformOrigin(transformOrigin) {
  (0, _invariant["default"])(transformOrigin.length === 3, 'Transform origin must have exactly 3 values.');
  var _transformOrigin = (0, _slicedToArray2["default"])(transformOrigin, 3),
    x = _transformOrigin[0],
    y = _transformOrigin[1],
    z = _transformOrigin[2];
  (0, _invariant["default"])(typeof x === 'number' || typeof x === 'string' && x.endsWith('%'), 'Transform origin x-position must be a number. Passed value: %s.', x);
  (0, _invariant["default"])(typeof y === 'number' || typeof y === 'string' && y.endsWith('%'), 'Transform origin y-position must be a number. Passed value: %s.', y);
  (0, _invariant["default"])(typeof z === 'number', 'Transform origin z-position must be a number. Passed value: %s.', z);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,