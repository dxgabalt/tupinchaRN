21833cb2a7735a4f9e96e6cbae64737f
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedModule', function () {
  return {
    addListener: jest.fn(),
    removeListeners: jest.fn(),
    removeListener: jest.fn(),
    createAnimatedComponent: function createAnimatedComponent(Component) {
      return Component;
    },
    Value: jest.fn().mockImplementation(function () {
      return {
        setValue: jest.fn(),
        interpolate: jest.fn()
      };
    }),
    timing: jest.fn(function () {
      return {
        start: jest.fn()
      };
    }),
    spring: jest.fn(function () {
      return {
        start: jest.fn()
      };
    }),
    decay: jest.fn(function () {
      return {
        start: jest.fn()
      };
    }),
    stopAnimation: jest.fn(),
    resetAnimation: jest.fn(),
    addAnimation: jest.fn()
  };
});
_getJestObj().mock('react-native-gesture-handler', function () {
  return {
    Swipeable: jest.fn().mockImplementation(function (_ref) {
      var children = _ref.children;
      return children;
    }),
    DrawerLayout: jest.fn().mockImplementation(function (_ref2) {
      var children = _ref2.children;
      return children;
    }),
    State: {},
    ScrollView: jest.requireActual('react-native').ScrollView,
    TextInput: jest.requireActual('react-native').TextInput
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return require('@react-native-async-storage/async-storage/jest/async-storage-mock');
});
var _globals = require("@jest/globals");
require("@testing-library/jest-native/extend-expect");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhZGRMaXN0ZW5lciIsImplc3QiLCJmbiIsInJlbW92ZUxpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVyIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJDb21wb25lbnQiLCJWYWx1ZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInNldFZhbHVlIiwiaW50ZXJwb2xhdGUiLCJ0aW1pbmciLCJzdGFydCIsInNwcmluZyIsImRlY2F5Iiwic3RvcEFuaW1hdGlvbiIsInJlc2V0QW5pbWF0aW9uIiwiYWRkQW5pbWF0aW9uIiwiU3dpcGVhYmxlIiwiX3JlZiIsImNoaWxkcmVuIiwiRHJhd2VyTGF5b3V0IiwiX3JlZjIiLCJTdGF0ZSIsIlNjcm9sbFZpZXciLCJyZXF1aXJlQWN0dWFsIiwiVGV4dElucHV0IiwicmVxdWlyZSIsIl9nbG9iYWxzIiwiX3JlcXVpcmUiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydGEgZXhwZWN0IGRlIEplc3QgcHJpbWVyb1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5cbi8vIEx1ZWdvIGltcG9ydGEgbGFzIGV4dGVuc2lvbmVzIGRlIFRlc3RpbmcgTGlicmFyeVxuaW1wb3J0ICdAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3QnO1xuXG4vLyBNb2NrIHBhcmEgYW5pbWFjaW9uZXMgZW4gUmVhY3QgTmF0aXZlXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRNb2R1bGUnLCAoKSA9PiAoe1xuICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ6IChDb21wb25lbnQpID0+IENvbXBvbmVudCxcbiAgVmFsdWU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBzZXRWYWx1ZTogamVzdC5mbigpLFxuICAgIGludGVycG9sYXRlOiBqZXN0LmZuKCksXG4gIH0pKSxcbiAgdGltaW5nOiBqZXN0LmZuKCgpID0+ICh7IHN0YXJ0OiBqZXN0LmZuKCkgfSkpLFxuICBzcHJpbmc6IGplc3QuZm4oKCkgPT4gKHsgc3RhcnQ6IGplc3QuZm4oKSB9KSksXG4gIGRlY2F5OiBqZXN0LmZuKCgpID0+ICh7IHN0YXJ0OiBqZXN0LmZuKCkgfSkpLFxuICBzdG9wQW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gIHJlc2V0QW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gIGFkZEFuaW1hdGlvbjogamVzdC5mbigpLFxufSkpO1xuXG4vLyBNb2NrIHBhcmEgcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyJywgKCkgPT4gKHtcbiAgU3dpcGVhYmxlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuKSxcbiAgRHJhd2VyTGF5b3V0OiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuKSxcbiAgU3RhdGU6IHt9LFxuICBTY3JvbGxWaWV3OiBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpLlNjcm9sbFZpZXcsXG4gIFRleHRJbnB1dDogamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKS5UZXh0SW5wdXQsXG59KSk7XG5cbi8vIE1vY2sgcGFyYSBBc3luY1N0b3JhZ2Vcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PlxuICByZXF1aXJlKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZS9qZXN0L2FzeW5j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