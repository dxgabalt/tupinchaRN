34a51294774bb18fd607b5f641e044e2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
exports["default"] = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _invariant = _interopRequireDefault(require("invariant"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function createStringifySafeWithLimits(limits) {
  var _limits$maxDepth = limits.maxDepth,
    maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,
    _limits$maxStringLimi = limits.maxStringLimit,
    maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
    _limits$maxArrayLimit = limits.maxArrayLimit,
    maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
    _limits$maxObjectKeys = limits.maxObjectKeysLimit,
    maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
  var stack = [];
  function replacer(key, value) {
    while (stack.length && this !== stack[0]) {
      stack.shift();
    }
    if (typeof value === 'string') {
      var truncatedString = '...(truncated)...';
      if (value.length > maxStringLimit + truncatedString.length) {
        return value.substring(0, maxStringLimit) + truncatedString;
      }
      return value;
    }
    if ((0, _typeof2["default"])(value) !== 'object' || value === null) {
      return value;
    }
    var retval = value;
    if (Array.isArray(value)) {
      if (stack.length >= maxDepth) {
        retval = "[ ... array with ".concat(value.length, " values ... ]");
      } else if (value.length > maxArrayLimit) {
        retval = value.slice(0, maxArrayLimit).concat(["... extra ".concat(value.length - maxArrayLimit, " values truncated ...")]);
      }
    } else {
      (0, _invariant["default"])((0, _typeof2["default"])(value) === 'object', 'This was already found earlier');
      var keys = Object.keys(value);
      if (stack.length >= maxDepth) {
        retval = "{ ... object with ".concat(keys.length, " keys ... }");
      } else if (keys.length > maxObjectKeysLimit) {
        retval = {};
        var _iterator = _createForOfIteratorHelper(keys.slice(0, maxObjectKeysLimit)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var k = _step.value;
            retval[k] = value[k];
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var truncatedKey = '...(truncated keys)...';
        retval[truncatedKey] = keys.length - maxObjectKeysLimit;
      }
    }
    stack.unshift(retval);
    return retval;
  }
  return function stringifySafe(arg) {
    if (arg === undefined) {
      return 'undefined';
    } else if (arg === null) {
      return 'null';
    } else if (typeof arg === 'function') {
      try {
        return arg.toString();
      } catch (e) {
        return '[function unknown]';
      }
    } else if (arg instanceof Error) {
      return arg.name + ': ' + arg.message;
    } else {
      try {
        var ret = JSON.stringify(arg, replacer);
        if (ret === undefined) {
          return '["' + (0, _typeof2["default"])(arg) + '" failed to stringify]';
        }
        return ret;
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            return arg.toString();
          } catch (E) {}
        }
      }
    }
    return '["' + (0, _typeof2["default"])(arg) + '" failed to stringify]';
  };
}
var stringifySafe = createStringifySafeWithLimits({
  maxDepth: 10,
  maxStringLimit: 100,
  maxArrayLimit: 50,
  maxObjectKeysLimit: 50
});
var _default = exports["default"] = stringifySafe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,