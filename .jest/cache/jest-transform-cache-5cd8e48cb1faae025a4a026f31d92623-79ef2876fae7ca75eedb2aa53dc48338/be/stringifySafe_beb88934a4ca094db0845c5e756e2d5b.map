{"version":3,"names":["_invariant","_interopRequireDefault","require","_createForOfIteratorHelper","r","e","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","createStringifySafeWithLimits","limits","_limits$maxDepth","maxDepth","Number","POSITIVE_INFINITY","_limits$maxStringLimi","maxStringLimit","_limits$maxArrayLimit","maxArrayLimit","_limits$maxObjectKeys","maxObjectKeysLimit","stack","replacer","key","shift","truncatedString","substring","_typeof2","retval","concat","invariant","keys","Object","_iterator","_step","k","err","truncatedKey","unshift","stringifySafe","arg","undefined","Error","message","ret","JSON","stringify","E","_default","exports"],"sources":["stringifySafe.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport invariant from 'invariant';\n\n/**\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\n * (e.g. from circular objects) and always returns a string and never throws.\n */\nexport function createStringifySafeWithLimits(limits: {|\n  maxDepth?: number,\n  maxStringLimit?: number,\n  maxArrayLimit?: number,\n  maxObjectKeysLimit?: number,\n|}): mixed => string {\n  const {\n    maxDepth = Number.POSITIVE_INFINITY,\n    maxStringLimit = Number.POSITIVE_INFINITY,\n    maxArrayLimit = Number.POSITIVE_INFINITY,\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\n  } = limits;\n  const stack: Array<mixed> = [];\n  /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n   * Flow's LTI update could not be added via codemod */\n  function replacer(key: string, value: mixed): mixed {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n\n    if (typeof value === 'string') {\n      const truncatedString = '...(truncated)...';\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n\n    let retval: mixed = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value\n          .slice(0, maxArrayLimit)\n          .concat([\n            `... extra ${value.length - maxArrayLimit} values truncated ...`,\n          ]);\n      }\n    } else {\n      // Add refinement after Array.isArray call.\n      invariant(typeof value === 'object', 'This was already found earlier');\n      let keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        // Return a sample of the keys.\n        retval = ({}: {[string]: mixed});\n        for (let k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        const truncatedKey = '...(truncated keys)...';\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n\n  return function stringifySafe(arg: mixed): string {\n    if (arg === undefined) {\n      return 'undefined';\n    } else if (arg === null) {\n      return 'null';\n    } else if (typeof arg === 'function') {\n      try {\n        return arg.toString();\n      } catch (e) {\n        return '[function unknown]';\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + ': ' + arg.message;\n    } else {\n      // Perform a try catch, just in case the object has a circular\n      // reference or stringify throws for some other reason.\n      try {\n        const ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch (e) {\n        if (typeof arg.toString === 'function') {\n          try {\n            // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\n            return arg.toString();\n          } catch (E) {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\n\nconst stringifySafe: mixed => string = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50,\n});\n\nexport default stringifySafe;\n"],"mappings":";;;;;;;;;AAUA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAkC,SAAAC,2BAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,yBAAAC,MAAA,IAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,CAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,CAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,CAAA,IAAAD,CAAA,uBAAAA,CAAA,CAAAQ,MAAA,IAAAN,CAAA,KAAAF,CAAA,GAAAE,CAAA,OAAAO,EAAA,MAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,WAAAH,EAAA,IAAAT,CAAA,CAAAQ,MAAA,KAAAK,IAAA,WAAAA,IAAA,MAAAC,KAAA,EAAAd,CAAA,CAAAS,EAAA,UAAAR,CAAA,WAAAA,EAAAD,CAAA,UAAAA,CAAA,KAAAe,CAAA,EAAAL,CAAA,gBAAAM,SAAA,iJAAAC,CAAA,EAAAC,CAAA,OAAAC,CAAA,gBAAAR,CAAA,WAAAA,EAAA,IAAAT,CAAA,GAAAA,CAAA,CAAAkB,IAAA,CAAApB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAZ,CAAA,GAAAE,CAAA,CAAAmB,IAAA,WAAAH,CAAA,GAAAlB,CAAA,CAAAa,IAAA,EAAAb,CAAA,KAAAC,CAAA,WAAAA,EAAAD,CAAA,IAAAmB,CAAA,OAAAF,CAAA,GAAAjB,CAAA,KAAAe,CAAA,WAAAA,EAAA,UAAAG,CAAA,YAAAhB,CAAA,cAAAA,CAAA,8BAAAiB,CAAA,QAAAF,CAAA;AAAA,SAAAV,4BAAAP,CAAA,EAAAkB,CAAA,QAAAlB,CAAA,2BAAAA,CAAA,SAAAsB,iBAAA,CAAAtB,CAAA,EAAAkB,CAAA,OAAAhB,CAAA,MAAAqB,QAAA,CAAAH,IAAA,CAAApB,CAAA,EAAAwB,KAAA,6BAAAtB,CAAA,IAAAF,CAAA,CAAAyB,WAAA,KAAAvB,CAAA,GAAAF,CAAA,CAAAyB,WAAA,CAAAC,IAAA,aAAAxB,CAAA,cAAAA,CAAA,GAAAG,KAAA,CAAAsB,IAAA,CAAA3B,CAAA,oBAAAE,CAAA,+CAAA0B,IAAA,CAAA1B,CAAA,IAAAoB,iBAAA,CAAAtB,CAAA,EAAAkB,CAAA;AAAA,SAAAI,kBAAAtB,CAAA,EAAAkB,CAAA,aAAAA,CAAA,IAAAA,CAAA,GAAAlB,CAAA,CAAAQ,MAAA,MAAAU,CAAA,GAAAlB,CAAA,CAAAQ,MAAA,YAAAP,CAAA,MAAAW,CAAA,GAAAP,KAAA,CAAAa,CAAA,GAAAjB,CAAA,GAAAiB,CAAA,EAAAjB,CAAA,IAAAW,CAAA,CAAAX,CAAA,IAAAD,CAAA,CAAAC,CAAA,UAAAW,CAAA;AAM3B,SAASiB,6BAA6BA,CAACC,MAK5C,EAAmB;EACnB,IAAAC,gBAAA,GAKID,MAAM,CAJRE,QAAQ;IAARA,QAAQ,GAAAD,gBAAA,cAAGE,MAAM,CAACC,iBAAiB,GAAAH,gBAAA;IAAAI,qBAAA,GAIjCL,MAAM,CAHRM,cAAc;IAAdA,cAAc,GAAAD,qBAAA,cAAGF,MAAM,CAACC,iBAAiB,GAAAC,qBAAA;IAAAE,qBAAA,GAGvCP,MAAM,CAFRQ,aAAa;IAAbA,aAAa,GAAAD,qBAAA,cAAGJ,MAAM,CAACC,iBAAiB,GAAAG,qBAAA;IAAAE,qBAAA,GAEtCT,MAAM,CADRU,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAGN,MAAM,CAACC,iBAAiB,GAAAK,qBAAA;EAE/C,IAAME,KAAmB,GAAG,EAAE;EAG9B,SAASC,QAAQA,CAACC,GAAW,EAAE7B,KAAY,EAAS;IAClD,OAAO2B,KAAK,CAACjC,MAAM,IAAI,IAAI,KAAKiC,KAAK,CAAC,CAAC,CAAC,EAAE;MACxCA,KAAK,CAACG,KAAK,CAAC,CAAC;IACf;IAEA,IAAI,OAAO9B,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAM+B,eAAe,GAAG,mBAAmB;MAC3C,IAAI/B,KAAK,CAACN,MAAM,GAAG4B,cAAc,GAAGS,eAAe,CAACrC,MAAM,EAAE;QAC1D,OAAOM,KAAK,CAACgC,SAAS,CAAC,CAAC,EAAEV,cAAc,CAAC,GAAGS,eAAe;MAC7D;MACA,OAAO/B,KAAK;IACd;IACA,IAAI,IAAAiC,QAAA,aAAOjC,KAAK,MAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MAC/C,OAAOA,KAAK;IACd;IAEA,IAAIkC,MAAa,GAAGlC,KAAK;IACzB,IAAIT,KAAK,CAACC,OAAO,CAACQ,KAAK,CAAC,EAAE;MACxB,IAAI2B,KAAK,CAACjC,MAAM,IAAIwB,QAAQ,EAAE;QAC5BgB,MAAM,uBAAAC,MAAA,CAAuBnC,KAAK,CAACN,MAAM,kBAAe;MAC1D,CAAC,MAAM,IAAIM,KAAK,CAACN,MAAM,GAAG8B,aAAa,EAAE;QACvCU,MAAM,GAAGlC,KAAK,CACXU,KAAK,CAAC,CAAC,EAAEc,aAAa,CAAC,CACvBW,MAAM,CAAC,cAAAA,MAAA,CACOnC,KAAK,CAACN,MAAM,GAAG8B,aAAa,2BAC1C,CAAC;MACN;IACF,CAAC,MAAM;MAEL,IAAAY,qBAAS,EAAC,IAAAH,QAAA,aAAOjC,KAAK,MAAK,QAAQ,EAAE,gCAAgC,CAAC;MACtE,IAAIqC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACrC,KAAK,CAAC;MAC7B,IAAI2B,KAAK,CAACjC,MAAM,IAAIwB,QAAQ,EAAE;QAC5BgB,MAAM,wBAAAC,MAAA,CAAwBE,IAAI,CAAC3C,MAAM,gBAAa;MACxD,CAAC,MAAM,IAAI2C,IAAI,CAAC3C,MAAM,GAAGgC,kBAAkB,EAAE;QAE3CQ,MAAM,GAAI,CAAC,CAAqB;QAAC,IAAAK,SAAA,GAAAtD,0BAAA,CACnBoD,IAAI,CAAC3B,KAAK,CAAC,CAAC,EAAEgB,kBAAkB,CAAC;UAAAc,KAAA;QAAA;UAA/C,KAAAD,SAAA,CAAA1C,CAAA,MAAA2C,KAAA,GAAAD,SAAA,CAAAzC,CAAA,IAAAC,IAAA,GAAiD;YAAA,IAAxC0C,CAAC,GAAAD,KAAA,CAAAxC,KAAA;YACRkC,MAAM,CAACO,CAAC,CAAC,GAAGzC,KAAK,CAACyC,CAAC,CAAC;UACtB;QAAC,SAAAC,GAAA;UAAAH,SAAA,CAAApD,CAAA,CAAAuD,GAAA;QAAA;UAAAH,SAAA,CAAAtC,CAAA;QAAA;QACD,IAAM0C,YAAY,GAAG,wBAAwB;QAC7CT,MAAM,CAACS,YAAY,CAAC,GAAGN,IAAI,CAAC3C,MAAM,GAAGgC,kBAAkB;MACzD;IACF;IACAC,KAAK,CAACiB,OAAO,CAACV,MAAM,CAAC;IACrB,OAAOA,MAAM;EACf;EAEA,OAAO,SAASW,aAAaA,CAACC,GAAU,EAAU;IAChD,IAAIA,GAAG,KAAKC,SAAS,EAAE;MACrB,OAAO,WAAW;IACpB,CAAC,MAAM,IAAID,GAAG,KAAK,IAAI,EAAE;MACvB,OAAO,MAAM;IACf,CAAC,MAAM,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;MACpC,IAAI;QACF,OAAOA,GAAG,CAACrC,QAAQ,CAAC,CAAC;MACvB,CAAC,CAAC,OAAOtB,CAAC,EAAE;QACV,OAAO,oBAAoB;MAC7B;IACF,CAAC,MAAM,IAAI2D,GAAG,YAAYE,KAAK,EAAE;MAC/B,OAAOF,GAAG,CAAClC,IAAI,GAAG,IAAI,GAAGkC,GAAG,CAACG,OAAO;IACtC,CAAC,MAAM;MAGL,IAAI;QACF,IAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACN,GAAG,EAAElB,QAAQ,CAAC;QACzC,IAAIsB,GAAG,KAAKH,SAAS,EAAE;UACrB,OAAO,IAAI,OAAAd,QAAA,aAAUa,GAAG,IAAG,wBAAwB;QACrD;QACA,OAAOI,GAAG;MACZ,CAAC,CAAC,OAAO/D,CAAC,EAAE;QACV,IAAI,OAAO2D,GAAG,CAACrC,QAAQ,KAAK,UAAU,EAAE;UACtC,IAAI;YAEF,OAAOqC,GAAG,CAACrC,QAAQ,CAAC,CAAC;UACvB,CAAC,CAAC,OAAO4C,CAAC,EAAE,CAAC;QACf;MACF;IACF;IACA,OAAO,IAAI,OAAApB,QAAA,aAAUa,GAAG,IAAG,wBAAwB;EACrD,CAAC;AACH;AAEA,IAAMD,aAA8B,GAAG9B,6BAA6B,CAAC;EACnEG,QAAQ,EAAE,EAAE;EACZI,cAAc,EAAE,GAAG;EACnBE,aAAa,EAAE,EAAE;EACjBE,kBAAkB,EAAE;AACtB,CAAC,CAAC;AAAC,IAAA4B,QAAA,GAAAC,OAAA,cAEYV,aAAa","ignoreList":[]}