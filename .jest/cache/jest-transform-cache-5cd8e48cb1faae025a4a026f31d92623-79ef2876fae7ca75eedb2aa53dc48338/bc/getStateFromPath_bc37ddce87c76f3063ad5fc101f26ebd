9eb946eb5673aa7a6283781f7ea2d4cd
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault2(require("@babel/runtime/helpers/typeof"));
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2["default"])(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStateFromPath = getStateFromPath;
var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));
var queryString = _interopRequireWildcard(require("query-string"));
var _arrayStartsWith = require("./arrayStartsWith.js");
var _findFocusedRoute = require("./findFocusedRoute.js");
var _getPatternParts = require("./getPatternParts.js");
var _isArrayEqual = require("./isArrayEqual.js");
var _validatePathConfig = require("./validatePathConfig.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    "default": e
  };
}
function getStateFromPath(path, options) {
  var _options$path;
  var _getConfigResources = getConfigResources(options),
    initialRoutes = _getConfigResources.initialRoutes,
    configs = _getConfigResources.configs;
  var screens = options === null || options === void 0 ? void 0 : options.screens;
  var remaining = path.replace(/\/+/g, '/').replace(/^\//, '').replace(/\?.*$/, '');
  remaining = remaining.endsWith('/') ? remaining : "".concat(remaining, "/");
  var prefix = options === null || options === void 0 || (_options$path = options.path) === null || _options$path === void 0 ? void 0 : _options$path.replace(/^\//, '');
  if (prefix) {
    var normalizedPrefix = prefix.endsWith('/') ? prefix : "".concat(prefix, "/");
    if (!remaining.startsWith(normalizedPrefix)) {
      return undefined;
    }
    remaining = remaining.replace(normalizedPrefix, '');
  }
  if (screens === undefined) {
    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {
      var name = decodeURIComponent(segment);
      return {
        name: name
      };
    });
    if (_routes.length) {
      return createNestedStateObject(path, _routes, initialRoutes);
    }
    return undefined;
  }
  if (remaining === '/') {
    var match = configs.find(function (config) {
      return config.segments.join('/') === '';
    });
    if (match) {
      return createNestedStateObject(path, match.routeNames.map(function (name) {
        return {
          name: name
        };
      }), initialRoutes, configs);
    }
    return undefined;
  }
  var result;
  var current;
  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),
    routes = _matchAgainstConfigs.routes,
    remainingPath = _matchAgainstConfigs.remainingPath;
  if (routes !== undefined) {
    current = createNestedStateObject(path, routes, initialRoutes, configs);
    remaining = remainingPath;
    result = current;
  }
  if (current == null || result == null) {
    return undefined;
  }
  return result;
}
var cachedConfigResources = new WeakMap();
function getConfigResources(options) {
  if (!options) return prepareConfigResources();
  var cached = cachedConfigResources.get(options);
  if (cached) return cached;
  var resources = prepareConfigResources(options);
  cachedConfigResources.set(options, resources);
  return resources;
}
function prepareConfigResources(options) {
  if (options) {
    (0, _validatePathConfig.validatePathConfig)(options);
  }
  var initialRoutes = getInitialRoutes(options);
  var configs = getSortedNormalizedConfigs(initialRoutes, options === null || options === void 0 ? void 0 : options.screens);
  checkForDuplicatedConfigs(configs);
  var configWithRegexes = getConfigsWithRegexes(configs);
  return {
    initialRoutes: initialRoutes,
    configs: configs,
    configWithRegexes: configWithRegexes
  };
}
function getInitialRoutes(options) {
  var initialRoutes = [];
  if (options !== null && options !== void 0 && options.initialRouteName) {
    initialRoutes.push({
      initialRouteName: options.initialRouteName,
      parentScreens: []
    });
  }
  return initialRoutes;
}
function getSortedNormalizedConfigs(initialRoutes) {
  var _ref;
  var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (_ref = []).concat.apply(_ref, (0, _toConsumableArray2["default"])(Object.keys(screens).map(function (key) {
    return _createNormalizedConfigs(key, screens, initialRoutes, [], [], []);
  }))).sort(function (a, b) {
    if ((0, _isArrayEqual.isArrayEqual)(a.segments, b.segments)) {
      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));
    }
    if ((0, _arrayStartsWith.arrayStartsWith)(a.segments, b.segments)) {
      return -1;
    }
    if ((0, _arrayStartsWith.arrayStartsWith)(b.segments, a.segments)) {
      return 1;
    }
    for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {
      if (a.segments[i] == null) {
        return 1;
      }
      if (b.segments[i] == null) {
        return -1;
      }
      var aWildCard = a.segments[i] === '*';
      var bWildCard = b.segments[i] === '*';
      var aParam = a.segments[i].startsWith(':');
      var bParam = b.segments[i].startsWith(':');
      var aRegex = aParam && a.segments[i].includes('(');
      var bRegex = bParam && b.segments[i].includes('(');
      if (aWildCard && bWildCard || aRegex && bRegex) {
        continue;
      }
      if (aWildCard && !bWildCard) {
        return 1;
      }
      if (bWildCard && !aWildCard) {
        return -1;
      }
      if (aParam && !bParam) {
        return 1;
      }
      if (bParam && !aParam) {
        return -1;
      }
      if (aRegex && !bRegex) {
        return -1;
      }
      if (bRegex && !aRegex) {
        return 1;
      }
    }
    return a.segments.length - b.segments.length;
  });
}
function checkForDuplicatedConfigs(configs) {
  configs.reduce(function (acc, config) {
    var pattern = config.segments.join('/');
    if (acc[pattern]) {
      var a = acc[pattern].routeNames;
      var b = config.routeNames;
      var intersects = a.length > b.length ? b.every(function (it, i) {
        return a[i] === it;
      }) : a.every(function (it, i) {
        return b[i] === it;
      });
      if (!intersects) {
        throw new Error("Found conflicting screens with the same pattern. The pattern '".concat(pattern, "' resolves to both '").concat(a.join(' > '), "' and '").concat(b.join(' > '), "'. Patterns must be unique and cannot resolve to more than one screen."));
      }
    }
    return Object.assign(acc, (0, _defineProperty2["default"])({}, pattern, config));
  }, {});
}
function getConfigsWithRegexes(configs) {
  return configs.map(function (c) {
    return _objectSpread(_objectSpread({}, c), {}, {
      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined
    });
  });
}
var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {
  var routes;
  var remainingPath = remaining;
  var _iterator = _createForOfIteratorHelper(configs),
    _step;
  try {
    var _loop = function _loop() {
        var config = _step.value;
        if (!config.regex) {
          return 0;
        }
        var match = remainingPath.match(config.regex);
        if (match) {
          routes = config.routeNames.map(function (routeName) {
            var routeConfig = configs.find(function (c) {
              return c.screen === routeName && (0, _arrayStartsWith.arrayStartsWith)(config.segments, c.segments);
            });
            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(function (_ref2) {
              var _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
                key = _ref3[0],
                value = _ref3[1];
              var index = Number(key.replace('param_', ''));
              var param = routeConfig.params.find(function (it) {
                return it.index === index;
              });
              if ((param === null || param === void 0 ? void 0 : param.screen) === routeName && param !== null && param !== void 0 && param.name) {
                return [param.name, value];
              }
              return null;
            }).filter(function (it) {
              return it != null;
            }).map(function (_ref4) {
              var _routeConfig$parse;
              var _ref5 = (0, _slicedToArray2["default"])(_ref4, 2),
                key = _ref5[0],
                value = _ref5[1];
              if (value == null) {
                return [key, undefined];
              }
              var decoded = decodeURIComponent(value);
              var parsed = (_routeConfig$parse = routeConfig.parse) !== null && _routeConfig$parse !== void 0 && _routeConfig$parse[key] ? routeConfig.parse[key](decoded) : decoded;
              return [key, parsed];
            })) : undefined;
            if (params && Object.keys(params).length) {
              return {
                name: routeName,
                params: params
              };
            }
            return {
              name: routeName
            };
          });
          remainingPath = remainingPath.replace(match[0], '');
          return 1;
        }
      },
      _ret;
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _ret = _loop();
      if (_ret === 0) continue;
      if (_ret === 1) break;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    routes: routes,
    remainingPath: remainingPath
  };
};
var _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig, initials, paths, parentScreens, routeNames) {
  var configs = [];
  routeNames.push(screen);
  parentScreens.push(screen);
  var config = routeConfig[screen];
  if (typeof config === 'string') {
    paths.push({
      screen: screen,
      path: config
    });
    configs.push(createConfigItem(screen, (0, _toConsumableArray2["default"])(routeNames), (0, _toConsumableArray2["default"])(paths)));
  } else if ((0, _typeof2["default"])(config) === 'object') {
    var _config$alias;
    if (typeof config.path === 'string') {
      if (config.exact && config.path == null) {
        throw new Error("Screen '".concat(screen, "' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`."));
      }
      var aliasConfigs = [];
      if (config.alias) {
        var _iterator2 = _createForOfIteratorHelper(config.alias),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var alias = _step2.value;
            if (typeof alias === 'string') {
              aliasConfigs.push(createConfigItem(screen, (0, _toConsumableArray2["default"])(routeNames), [].concat((0, _toConsumableArray2["default"])(paths), [{
                screen: screen,
                path: alias
              }]), config.parse));
            } else if ((0, _typeof2["default"])(alias) === 'object') {
              aliasConfigs.push(createConfigItem(screen, (0, _toConsumableArray2["default"])(routeNames), alias.exact ? [{
                screen: screen,
                path: alias.path
              }] : [].concat((0, _toConsumableArray2["default"])(paths), [{
                screen: screen,
                path: alias.path
              }]), alias.parse));
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (config.exact) {
        paths.length = 0;
      }
      paths.push({
        screen: screen,
        path: config.path
      });
      configs.push(createConfigItem(screen, (0, _toConsumableArray2["default"])(routeNames), (0, _toConsumableArray2["default"])(paths), config.parse));
      configs.push.apply(configs, aliasConfigs);
    }
    if (typeof config !== 'string' && typeof config.path !== 'string' && (_config$alias = config.alias) !== null && _config$alias !== void 0 && _config$alias.length) {
      throw new Error("Screen '".concat(screen, "' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'."));
    }
    if (config.screens) {
      if (config.initialRouteName) {
        initials.push({
          initialRouteName: config.initialRouteName,
          parentScreens: parentScreens
        });
      }
      Object.keys(config.screens).forEach(function (nestedConfig) {
        var result = _createNormalizedConfigs(nestedConfig, config.screens, initials, (0, _toConsumableArray2["default"])(paths), (0, _toConsumableArray2["default"])(parentScreens), routeNames);
        configs.push.apply(configs, (0, _toConsumableArray2["default"])(result));
      });
    }
  }
  routeNames.pop();
  return configs;
};
var createConfigItem = function createConfigItem(screen, routeNames, paths, parse) {
  var parts = [];
  var _iterator3 = _createForOfIteratorHelper(paths),
    _step3;
  try {
    var _loop2 = function _loop2() {
      var _step3$value = _step3.value,
        screen = _step3$value.screen,
        path = _step3$value.path;
      parts.push.apply(parts, (0, _toConsumableArray2["default"])((0, _getPatternParts.getPatternParts)(path).map(function (part) {
        return _objectSpread(_objectSpread({}, part), {}, {
          screen: screen
        });
      })));
    };
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      _loop2();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var regex = parts.length ? new RegExp("^(".concat(parts.map(function (it, i) {
    if (it.param) {
      var reg = it.regex || '[^/]+';
      return "(((?<param_".concat(i, ">").concat(reg, ")\\/)").concat(it.optional ? '?' : '', ")");
    }
    return "".concat(it.segment === '*' ? '.*' : (0, _escapeStringRegexp["default"])(it.segment), "\\/");
  }).join(''), ")$")) : undefined;
  var segments = parts.map(function (it) {
    return it.segment;
  });
  var params = parts.map(function (it, i) {
    return it.param ? {
      index: i,
      screen: it.screen,
      name: it.param
    } : null;
  }).filter(function (it) {
    return it != null;
  });
  return {
    screen: screen,
    regex: regex,
    segments: segments,
    params: params,
    routeNames: routeNames,
    parse: parse
  };
};
var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {
  var _iterator4 = _createForOfIteratorHelper(flatConfig),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var config = _step4.value;
      if (routeName === config.routeNames[config.routeNames.length - 1]) {
        return config.parse;
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return undefined;
};
var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {
  var _iterator5 = _createForOfIteratorHelper(initialRoutes),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var config = _step5.value;
      if (parentScreens.length === config.parentScreens.length) {
        var sameParents = true;
        for (var i = 0; i < parentScreens.length; i++) {
          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {
            sameParents = false;
            break;
          }
        }
        if (sameParents) {
          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;
        }
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  return undefined;
};
var createStateObject = function createStateObject(initialRoute, route, isEmpty) {
  if (isEmpty) {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, route]
      };
    } else {
      return {
        routes: [route]
      };
    }
  } else {
    if (initialRoute) {
      return {
        index: 1,
        routes: [{
          name: initialRoute
        }, _objectSpread(_objectSpread({}, route), {}, {
          state: {
            routes: []
          }
        })]
      };
    } else {
      return {
        routes: [_objectSpread(_objectSpread({}, route), {}, {
          state: {
            routes: []
          }
        })]
      };
    }
  }
};
var createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {
  var route = routes.shift();
  var parentScreens = [];
  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);
  parentScreens.push(route.name);
  var state = createStateObject(initialRoute, route, routes.length === 0);
  if (routes.length > 0) {
    var nestedState = state;
    while (route = routes.shift()) {
      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);
      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;
      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);
      if (routes.length > 0) {
        nestedState = nestedState.routes[nestedStateIndex].state;
      }
      parentScreens.push(route.name);
    }
  }
  route = (0, _findFocusedRoute.findFocusedRoute)(state);
  route.path = path.replace(/\/$/, '');
  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);
  if (params) {
    route.params = _objectSpread(_objectSpread({}, route.params), params);
  }
  return state;
};
var parseQueryParams = function parseQueryParams(path, parseConfig) {
  var query = path.split('?')[1];
  var params = queryString.parse(query);
  if (parseConfig) {
    Object.keys(params).forEach(function (name) {
      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {
        params[name] = parseConfig[name](params[name]);
      }
    });
  }
  return Object.keys(params).length ? params : undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,