d165e245b34e58872894db65c61b9428
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEventEmitter = useEventEmitter;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != (0, _typeof2["default"])(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
function useEventEmitter(listen) {
  var listenRef = React.useRef(listen);
  React.useEffect(function () {
    listenRef.current = listen;
  });
  var listeners = React.useRef(Object.create(null));
  var create = React.useCallback(function (target) {
    var removeListener = function removeListener(type, callback) {
      var callbacks = listeners.current[type] ? listeners.current[type][target] : undefined;
      if (!callbacks) {
        return;
      }
      var index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    };
    var addListener = function addListener(type, callback) {
      listeners.current[type] = listeners.current[type] || {};
      listeners.current[type][target] = listeners.current[type][target] || [];
      listeners.current[type][target].push(callback);
      var removed = false;
      return function () {
        if (!removed) {
          removed = true;
          removeListener(type, callback);
        }
      };
    };
    return {
      addListener: addListener,
      removeListener: removeListener
    };
  }, []);
  var emit = React.useCallback(function (_ref) {
    var _items$target, _ref2, _listenRef$current;
    var type = _ref.type,
      data = _ref.data,
      target = _ref.target,
      canPreventDefault = _ref.canPreventDefault;
    var items = listeners.current[type] || {};
    var callbacks = target !== undefined ? (_items$target = items[target]) === null || _items$target === void 0 ? void 0 : _items$target.slice() : (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2["default"])(Object.keys(items).map(function (t) {
      return items[t];
    }))).filter(function (cb, i, self) {
      return self.lastIndexOf(cb) === i;
    });
    var event = {
      get type() {
        return type;
      }
    };
    if (target !== undefined) {
      Object.defineProperty(event, 'target', {
        enumerable: true,
        get: function get() {
          return target;
        }
      });
    }
    if (data !== undefined) {
      Object.defineProperty(event, 'data', {
        enumerable: true,
        get: function get() {
          return data;
        }
      });
    }
    if (canPreventDefault) {
      var defaultPrevented = false;
      Object.defineProperties(event, {
        defaultPrevented: {
          enumerable: true,
          get: function get() {
            return defaultPrevented;
          }
        },
        preventDefault: {
          enumerable: true,
          value: function value() {
            defaultPrevented = true;
          }
        }
      });
    }
    (_listenRef$current = listenRef.current) === null || _listenRef$current === void 0 || _listenRef$current.call(listenRef, event);
    callbacks === null || callbacks === void 0 || callbacks.forEach(function (cb) {
      return cb(event);
    });
    return event;
  }, []);
  return React.useMemo(function () {
    return {
      create: create,
      emit: emit
    };
  }, [create, emit]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZjIiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJ1c2VFdmVudEVtaXR0ZXIiLCJsaXN0ZW4iLCJsaXN0ZW5SZWYiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwibGlzdGVuZXJzIiwiY3JlYXRlIiwidXNlQ2FsbGJhY2siLCJ0YXJnZXQiLCJyZW1vdmVMaXN0ZW5lciIsInR5cGUiLCJjYWxsYmFjayIsImNhbGxiYWNrcyIsInVuZGVmaW5lZCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImFkZExpc3RlbmVyIiwicHVzaCIsInJlbW92ZWQiLCJlbWl0IiwiX3JlZiIsIl9pdGVtcyR0YXJnZXQiLCJfcmVmMiIsIl9saXN0ZW5SZWYkY3VycmVudCIsImRhdGEiLCJjYW5QcmV2ZW50RGVmYXVsdCIsIml0ZW1zIiwic2xpY2UiLCJjb25jYXQiLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJrZXlzIiwibWFwIiwiZmlsdGVyIiwiY2IiLCJzZWxmIiwibGFzdEluZGV4T2YiLCJldmVudCIsImVudW1lcmFibGUiLCJkZWZhdWx0UHJldmVudGVkIiwiZGVmaW5lUHJvcGVydGllcyIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJmb3JFYWNoIiwidXNlTWVtbyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VFdmVudEVtaXR0ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVC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